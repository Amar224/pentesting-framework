#!/usr/bin/env bash

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#┃ Project : Pentesting-Framework                              ┃
#┃ Author  : ABHacker Official                                 ┃
#┃ Version : 9.9.5 (Latest)                                    ┃
#┃ Github  : abhackerofficial <github.com/abhackerofficial>    ┃
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

__return__ () {
source __return__ &> /dev/null
if [[ ! $? == 105 ]]
then
printf 105
fi
}

set +x

if [[ $_ == "+x" ]]
then
debug="false"
else
debug="true"
fi

__return__=$(printf "$(__return__)")

WAIT() {
sleep 0.01
}

# Prompt

PROMPT=1

# Color

COLOR=1

# Auto List while execution modules.
autolist=on

# Update Checker default : updater=on
updater=on

# Animation
# default : true

ANIMATION=true

# Variable

export RAWLINK=https://raw.githubusercontent.com/abhackerofficial/pentesting-framework/master
export GITLINK=https://github.com/abhackerofficial/pentesting-framework
export OS=$(uname -o | grep -o "Android")
export OUTPUT=$HOME/.history.psf
ARCH=$(dpkg --print-architecture)
CWD=$(pwd)
VAR=9.9.5
PSNUM=3
CLNUM=3
NUM=1

# Modules options list

if [[ ! $__return__ == 105 ]];then
  if [ ! -f "$CWD/assets/programs/utils.psf" ]
  then
    bash <(curl -sLo- "${RAWLINK}/assets/programs/utils.psf")
  else
    bash $CWD/assets/programs/utils.psf
  fi
  source $CWD/assets/login/login.conf
  source $CWD/assets/programs/colors.psf
  source $CWD/assets/programs/animation.psf
  source $CWD/assets/programs/list.module
  source $CWD/assets/programs/info.module
  source $CWD/assets/programs/help.module
  source $CWD/assets/extras/extra.module
  source $CWD/assets/extras/extra.conf
else
  source <(curl -sLo- "${RAWLINK}/assets/login/login.conf")
  source <(curl -sLo- "${RAWLINK}/assets/programs/colors.psf")
  source <(curl -sLo- "${RAWLINK}/assets/programs/animation.psf")
  source <(curl -sLo- "${RAWLINK}/assets/programs/list.module")
  source <(curl -sLo- "${RAWLINK}/assets/programs/info.module")
  source <(curl -sLo- "${RAWLINK}/assets/programs/help.module")
  source <(curl -sLo- "${RAWLINK}/assets/programs/extra.module")
  source <(curl -sLo- "${RAWLINK}/assets/programs/extra.conf")
fi

if [[ $ANIMATION == "true" ]]
then
  :
else
  unset progress-bar
  progress-bar()
  {
    $@ | printf "\rWelcome to Pentesting Framework ..."
         printf "                                   \r"
  }
fi

SUBMODULES="${#SUBMODULE[@]}"
MODULES="${#MODULE[@]}"

# Sign

R0="$(printf '\033[00m')"
R1="$(printf '\033[01m')"
R2="$(printf '\033[02m')"
R3="$(printf '\033[03m')"
R4="$(printf '\033[04m')"
R5="$(printf '\033[05m')"
R6="$(printf '\033[06m')"
R7="$(printf '\033[07m')"

# Colors

if [[ ${1} == "color="* ]]
then
 INT=$(printf "${1#color=}")
  INT=${INT#0}
  if [[ ${INT} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
   if [[ ! ${INT} -gt ${CLNUM} ]]
    then
       if [[ ! $__return__ == 105 ]]
        then
          unset COLOR
        FIND=$(grep -w "COLOR=*" $(basename $0) | awk NR==1)
        sed -i "s/$FIND/COLOR=$INT/g" $(basename $0)
        COLOR=$INT 
        else
        COLOR=$INT
       fi
    else
      :
   fi
 fi
fi

if [[ ${COLOR} == "1" ]]
then
  color_mode 1
elif [[ ${COLOR} == "2" ]]
then
  color_mode 2
elif [[ ${COLOR} == "3" ]]
then
  color_mode 3
fi

r0SIGN="${C1}(${R0}>${C1})${R0}"
r1SIGN="${C1}(${R0}!${C1})${R0}"

g0SIGN="${C2}(${R0}>${C2})${R0}"
g1SIGN="${C2}(${R0}!${C2})${R0}"

b0SIGN="${C4}(${R0}>${C4})${R0}"
b1SIGN="${C4}(${R0}!${C4})${R0}"

if [[ ${1} == "color="* ]]
then
 INT=$(printf "${1#color=}")
  INT=${INT#0}
  if [[ ${INT} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
   if [[ ! ${INT} -gt ${CLNUM} ]]
    then
       if [[ ! $__return__ == 105 ]]
        then
          COLOR=$INT
          echo "${g0SIGN} Your Color set as ${R1}${INT} (${color_name}${R0}${R1})${R0}"
        else
        COLOR=$INT
       fi
    else
    echo "${r0SIGN} Your Color Number digit must be above ${C1}${INT}${R0} <= ${C2}${CLNUM}${R0}"
   fi
 fi
fi

# Psf Requirements

if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/requirements.psf
else
source <(curl -sLo- "${RAWLINK}/assets/programs/requirements.psf")
fi

sudoPERM() {
if [[ $OS == *'Android'* ]];then
  :
else
sudo -v
fi
}

setOS() {
if [[ $OS == *'Android'* ]];then
printf "$1"
# "$1"
else
printf "$2"
# "$2"
fi
}


getSYS()
{
WHO=$(printf "$(whoami)@$(hostname)")
SHL=$(printf "$SHELL")

if [[ $OS == *'Android'* ]];then
SYS=$(printf "$(getprop ro.product.manufacturer): ${OS} $(getprop ro.build.version.release)")
KRN=$(uname -r)
else
SYS=$(source /etc/os-release ; echo $NAME)
KRN=$(uname -r)
fi

printf "
User     : ${WHO}
System   : ${SYS} - ${KRN}
Shell    : ${SHL}
"
}

# <<<--- Interpreter Section ! --->>>

cacheFILES() {
if [[ ${MODE} == "PHISH/OTPWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${OSITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "PHISH/NOTPWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "PHISH/GPSWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${GSITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "PHISH/CAMWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${CSITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "PHISH/MICWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${MSITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "ATTACK/DDOS" ]]
then
rm -rf $PWD/programs/ATTACK/DDOS/ddos &> /dev/null
fi
}

interruptPSF() {
printf "                                                  \r"
echo -e "${r0SIGN} Psfconsole is Interrupted                "
exit 0
}

vaild_login()
{
eval $(base64 -d <<<"YmxvY2tXQUxMCg==")
}

description()
{
NAME="${1}"
MODE="${2}"
NET="${3}"
}

special.event()
{

# Special Events.
if [[ ! $NET == "off"  ]]
then
source <(curl -sLo- "https://raw.githubusercontent.com/abhackerofficial/psf-extras/master/event.msg")
fi
sleep 1
}

if [[ -f "$PREFIX/etc/confPSF.install" ]]
then
  source $PREFIX/etc/confPSF.install
  presentDIR="${installDIR}"
fi

killZONE() {
  if [[ ! $__return__ == 105 ]];then
    source $CWD/assets/programs/pskill.psf
  else
    source <(curl -sLo- "${RAWLINK}/assets/programs/killprogress.psf")
  fi

  PS_NUM=${#psKill[@]}

for m in "${psKills[@]}"
  do
  N_LOOP=$((${N_LOOP:-0}+1))
  PS_CODE=${m::$((${#m}))}
  kill $PS_CODE &> /dev/null
  ((n_NUM++))
done
}

interrupt () {
exit_on_signal_SIGINT () { killZONE
if [[ ! $__return__ == 105 ]];then
if [[ ${ARG} == "-s" ]];then
if [[ ${SITENUM} == "${SITENUM}" ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITENUM}" &> /dev/null
fi
else
cacheFILES
fi
interruptPSF
else
interruptPSF
fi
}

exit_on_signal_SIGTSTP () { killZONE
if [[ ! $__return__ == 105 ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
if [[ ${ARG} == "-s" ]];then
if [[ ${SITENUM} == "${SITENUM}" ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITENUM}" &> /dev/null
fi
else
cacheFILES
fi
interruptPSF
else
interruptPSF
fi
}

trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTSTP SIGTSTP
}


# <<<--- Help Section --->>>

SHOWMODULES() {
for i in "${SHOWMODULES[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  SHOW=${i::$((${#i}))}
  printf "${C3}${SHOW}${R0}\n"
  ((NUM++))
  done
}

SUBMODULE() {
for i in "${SUBMODULE[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  SHOW=${i::$((${#i}))}
  printf "${C3}${SHOW}${R0}\n"
  ((NUM++))
  done
}

helpCOMMANDS () {
echo -e "
${B0}Console Commands${R0}
================

    Command     Description
    -------     -----------
    ${C2}show${R0}        Command to displays option of a given type.
    ${C2}quit${R0}        Command to exit psfconsole instance.
    ${C2}clear${R0}       Command to clear screen.
    ${C2}help${R0}        Command to show help meunu.
    ${C2}search${R0}      Command to search available module.
    ${C2}lookup${R0}      Comannd to get info about your ip.
    ${C2}banner${R0}      Command to shows a random banner.
    ${C2}history${R0}     Command to show command history.
    ${C2}version${R0}     Command to show the framework version.


${B0}Module Commands${R0}
===============

    Command     Description
    -------     -----------
    ${C2}use${R0}         Command to call existing module${R1}s${R0}.
    ${C2}list${R0}        Command to show available option${R1}s${R0}.
    ${C2}info${R0}        Command to information about module${R1}s${R0}.
    ${C2}back${R0}        Command to move back to main console.

${B0}psfconsole${R0}
==========
"
text-animation 0.01 \
"\`${C4}psfconsole${R0}\` is a bundle of penetration testing tools and an interface to Pentesting Framework.
This framework is currently undergoing heavy development. So, please be patient and keep an eye on this space!
"
}


# <<<--- Show [cmd] Section ! --->>>

moduleCOMMANDS() {
echo -e "
${B0}${C3}Available Modules${R0}
=================

$(SHOWMODULES)

Usage: ${C3}use :<module>/<submodule>/handler${R0}
e.g:   ${C3}use :secure/hashes/handler${R0}

${B0}${C2}Usage of Module & description${R0}
=============================

${C2}┌[use :phish/otpweb/handler${R0}
└─► module to run :otp phishing site${R1}s${R0}.

${C2}┌[use :phish/notpweb/handler${R0}
└─► module to run :notp phishing site${R1}s${R0}.

${C2}┌[use :phish/gpsweb/handler${R0}
└─► module to create geolocation phishing site${R1}s${R0}.

${C2}┌[use :phish/camweb/handler${R0}
└─► module to create camera phishing site${R1}s${R0}.

${C2}┌[use :phish/micweb/handler${R0}
└─► module to create microphone phishing site${R1}s${R0}.

${C2}┌[use :bomber/callnsms/handler${R0}
└─► module to perform a bombing attack.

${C2}┌[use :lookup/user/handler${R0}
└─► module to gather information of user${R1}s${R0}.

${C2}┌[use :lookup/number/handler${R0}
└─► module to gather information of number${R1}s${R0}.

${C2}┌[use :lookup/mac/handler${R0}
└─► module to gather vendor information from Mac addresse${R1}s${R0}.

${C2}┌[use :lookup/coordinate/handler${R0}
└─► module to gather exact location using coordinate${R1}s${R0}.

${C2}┌[use :remote/payload/handler${R0}
└─► module to create a metasploit payload
  for your target device${R1}s${R0}.

${C2}┌[use :brute/social/handler${R0}
└─► module to perform social bruteforce attack.

${C2}┌[use :brute/hashes/handler${R0}
└─► module to perform hashes bruteforce attack.

${C2}┌[use :attack/ddos/handler${R0}
└─► module to perform ddos attack on site${R1}s${R0}.

${C2}┌[use :secure/hashes/handler${R0}
└─► module to generate hashing algorithm.

${C2}┌[use :secure/passwd/handler${R0}
└─► module to generate strong password${R1}s${R0}.

${C2}┌[use :system/binary/handler${R0}
└─► module to encdoe and decode binary.

${C2}┌[use :mask/nurl/handler${R0}
└─► module to create usr  masking.

${C2}┌[use :find/proxy/handler${R0}
└─► module to get fresh proxies for usage.

${C2}┌[use :identify/hashid/handler${R0}
└─► module to identify hash algorithms.

${C2}┌[use :scan/virus/handler${R0}
└─► module to scan viruses from a file.

${C2}┌[use :local/server/handler${R0}
└─► module to start php server.

${B0}${C4}Upcomming Modules & description${R0}
===============================

${C4}┌[use :steganography/handler${R0}
└─► module to keep secret message${R1}s${R0}.
"
}

infoCOMMANDS() {
NETWORK() {
connection() {
curl -Is http://www.google.com &> /dev/null
}
connect() {
connection
if [[ $? == 0 ]]
then
echo "Online             Psf have proper connection"
else
echo "Offline            Psf doesn't have connection"
fi
}
NETWORK=$(printf "$(connect)")
}

TYPE() {
type() {
if [[ ! $__return__ == 105 ]];then
echo "Offline            Psf is running on system"
else
echo "Online             Psf is running on temp"
fi
}
TYPE=$(printf "$(type)")
}

logPRINT() {

  printf "\r${b0SIGN} Connecting to Network ..."
}

logREMOVE() {
printf "\r                         "
}

UPDATE() {
UPDATE=$(cat <(curl -sLo- git.io/pSf) | grep "VAR" | awk '{print $1}' | head -n1 | cut -c 5-)
}

progress-bar "__loading__" "0" "prog:1" "Connecting to Network ..." -r


logPRINT & TYPE
logPRINT & UPDATE
logPRINT & NETWORK


if [[ $VAR == $UPDATE ]]
then
STATUS=$(echo "Unavailable        Check available update")
else
STATUS=$(echo "Available          Update command: psf update")
fi

echo -e "
Available Info:
===============

   Option         Current Status     Description
   -------        --------------     -----------
   Running        $TYPE
   PsfUpdate      $STATUS
   Connection     $NETWORK
"
}

pluginCOMMANDS() {
echo -e "${g0SIGN} Available Framework plugins:
    * api keys
    * history
    * json
    * ls.gd
    * ngrok
    * cloudfare
    * prompt
    * request
    * token
"
}


optionCOMMANDS() {
echo -e "
Global Options:
===============

   Option             Current Setting      Description
   ------             ---------------      -----------
   ConsoleDebug       $debug                Console output with debug mode
   HistoryLog         $LOG                   Verbosity of logs
   Prompt             psf prompt=$PROMPT         The prompt number
   PromptChar         $STYLE               The prompt character
   Color              psf color=$COLOR          The color number
   ColorScheme        $color_name             ${R0}The color output
"
}

# <<<--- Installer --->>>

if [[ ${1} == "-i" || ${1} == "--install" ]];then
if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/setup.psf $2 $3
else
source <(curl -sLo- "${RAWLINK}/assets/programs/setup.psf") $2 $3
fi
exit 0

elif [[ ${1} == "-u" || ${1} == "--update" ]];then
if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/update.psf
else
source <(curl -sLo- "${RAWLINK}/assets/programs/update.psf")
fi
exit 0

elif [[ ${1} == "-r" || ${1} == "--remove" ]];then
if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/remove.psf
else
source <(curl -sLo- "${RAWLINK}/assets/programs/remove.psf")
fi
exit 0
fi


if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/credentials.site
else
source <(curl -sLo- "${RAWLINK}/assets/programs/credentials.site")
fi


# <<<--- Argument Section ! --->>>

if [[ ${1} == "-h" || ${1} == "--help" ]]
then
echo -e "
Usage: psfconsole [options]

Module options:
       module=[submodule] command=[STRING/INTEGER] :
       Jump to specific module whatever belong to submodule and run aswell.
   e.g: module=secure/hashes/handler command=list

Console options:
       -v, --version  Check framework version.
       -h, --help     Show framework help menu.
       -d, --debug    Show logs in debugging mode.
       -q, --quite    Do not print the banner on startup.
       -o, --output   Output to the specified file.

Advance options:
       color=[NUM]    Set a different colors while start.
       prompt=[NUM]   Set a different prompts while start.
"
exit 0

elif [[ ${1} == "-v" || ${1} == "--version" ]]
then
echo "Framework Version: release v${VAR}"
exit 0

elif [[ ${1} == "-d" || ${1} == "--debug" ]]
then
set -x
debug="true"

elif [[ ${1} == "-o" || ${1} == "--output" ]]
then
$(basename $0) | tee > $2 || exit 0
fi

if [[ ${1} == "prompt="* ]]
then
 INT=$(printf "${1#prompt=}")
  INT=${INT#0}
  if [[ ${INT} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
   if [[ ! ${INT} -gt ${PSNUM} ]]
    then
       if [[ ! $__return__ == 105 ]]
        then
        FIND=$(grep -w "PROMPT=*" $(basename $0) | awk NR==1)
        sed -i "s/$FIND/PROMPT=$INT/g" $(basename $0)
        PROMPT=$INT
        else
        PROMPT=$INT
       fi
    else
    echo "${r0SIGN} Your Prompt Number digit must be above ${C1}${INT}${R0} <= ${C2}${PSNUM}${R0}"
   fi
 fi
fi

if [[ ${1} == "module="* ]]
then
 INT=$(printf "use :${1#module=}")
  CHC="${INT#use :}"
  if [[ ${#CHC} -lt 1 ]]
   then
   echo -e "${r0SIGN} Literally module=‘nothing’ add a submodule like : lookup/user/handler"
   exit 1
  fi

 if [[ ${2} == "command="* ]]
  then
   CMD=$(printf "${2#command=}")
   if [[ ${#CMD} -gt 0 ]]
    then
    command=$INT
    input=$CMD
    FALSE=false
    else
    echo -e "${r0SIGN} Literally command=‘nothing’ add some command like : list"
    exit 1
   fi
 fi

 if [[ ${#CHC} -gt 0 ]] | [[ ${#CMD} -lt 1 ]]
  then
  echo -e "${r0SIGN} Now module=‘${INT}’, but command=‘nothing’ Please mention that."
  exit 1
 fi
fi


# <<<--- Read Section ! --->>>

readINPUT() {
if [[ ${input} == "list" ]]
 then
    $1

elif [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
    if [[ ${input} -lt $2 ]]
    then
    if [[ ! $__return__ == 105 ]];then
    source $CWD/programs/$3
    else
    cd $TMPDIR || exit 1
    printf "${b0SIGN} Downloading Program...   \r"
    source <(curl -sLo- "${RAWLINK}/programs/$3")
fi
fi
fi
     theERROR
     extarnalCMD
}


readINPUTS() {
if [[ $input == "$1" ]]
  then
     input=""
   if [[ ! $__return__ == 105 ]];then
    $2 $PWD/programs/$3
   else
   cd $TMPDIR || exit 1
   printf "${b0SIGN} Downloading Program...   \r"
   $2 <(curl -sLo- "${RAWLINK}/programs/$3")
fi
fi
    theERROR
    extarnalCMD
}

readLIST() {
if [[ $input == "list" ]]
     then
     $1
fi
}

cmdFALSE() {
if [[ ${FALSE} == "false" ]]
 then
if [[ ${#command} -gt 0 ]]
then
echo -e "${r0SIGN} Unsatisfied command ‘$command’ :: execute '?'/'help'"
fi
    exit 0
fi
}


# <<<--- Header Section ! --->>>

randomBANNER() {
RANDOMs=$(echo $((1 + $RANDOM % 17)))
if [[ ! $__return__ == 105 ]];then
  if [[ ${RANDOMs} == "15" ]]
  then
    source ${presentDIR}/assets/logos/logo.15
  else
   bash ${presentDIR}/assets/logos/logo."${RANDOMs}"
  fi
else
  if [[ ${RANDOMs} == "logo.15" ]]
  then
    source <(curl -sL "${RAWLINK}/assets/logos/logo.15")
  else
    source <(curl -sL "${RAWLINK}/assets/logos/logo.${RANDOMs}")
  fi
fi
}

randomTIP() {
RANDOMs=$(echo $((1 + $RANDOM % 2)))

case ${RANDOMs} in
1)
       printf "Psfconsole tip: When in a module, use ${C2}back${R0} to go\n";WAIT
       printf "back to the top level prompt\n\n";WAIT
       ;;
2)
       printf "Psfconsole tip: You can use ${C2}help${R0} to view all\n";WAIT
       printf "available commands and modules.\n\n";WAIT
       ;;
esac
}

theHEADER() {
randomBANNER
printf "+ -- --=[ ${C3}psfconsole release v${VAR}${R0}  ]=-- -- +\n";WAIT
printf "+ -- --=[ ${C2}${R4}${MODULES}${R0}${C2} modules - envmodules ${R4}${SUBMODULES}${R0} ]=-- -- +\n";WAIT

TOTAL_STUFF=$(printf $((MODULES+SUBMODULES)))
printf "\t   ${C4}└────────[${TOTAL_STUFF}${C8}]──────────┘${R0}\n\n";WAIT

if [[ -f $TMPDIR/update.log ]]
then
  source $TMPDIR/update.log
if [[ ${update} == 1 ]]
then
  if [[ $VAR == $newVER ]]
  then
    printf "\t     [ ${C2}Update Available${R0} ]\n"
  fi
source $TMPDIR/version.psf
if [[ $UPVAR == "1" ]]
then
printf "\t    ${C2}┌[ ${R0}Update Available${C2} ]┐${R0}\n"
printf "\t    ${C2}└────►[ $newVER ]◄─────┘${R0}\n\n"
fi
printf "  ${C2}Note: use \"psf update\" for update immediately.${R0}\n\n"
fi
fi

if [[ -f $TMPDIR/event.log ]]
then
  source $TMPDIR/event.log
if [[ $event == "1" ]]
then
  echo -e "${C2}(${R0}${todayEvent}${C2})${R0}\n"
fi
fi

randomTIP
}

if [[ ! ${1} == "-d" || ! ${1} == "--debug"  ]]
then
  if [[ ! ${2} == "dev"  ]]
  then
    if [[ ! $1 == "-q" ]]
    then
      if [[ ! $__return__ == 105 ]];then
gtUPDATE()
{
  if [[ ! $NET == "off" ]]
  then
[ $(git rev-parse HEAD) = $(git ls-remote $(git rev-parse --abbrev-ref @{u} | sed 's/\// /g') | cut -f1) ] && echo "update=0" > $TMPDIR/update.log || echo "update=1" > $TMPDIR/update.log
CHECKver=$(curl -sL $RAWLINK/psfconsole | grep "VAR=" | tr -d 'VAR=' | awk NR==1)
CHECKveR=$(echo "$CHECKver" | tr -d '.')
CHECKnVr=$(echo "$VAR" | tr -d '.')
if [[ $CHECKveR -gt $CHECKnVr  ]]
then
  echo "newVER=$CHECKver" > $TMPDIR/version.psf
  echo "UPVAR=1" >> $TMPDIR/version.psf
else
  echo "" > $TMPDIR/version.psf
fi
  fi
}

  if [[ ! $1 == "module"* ]]
  then
progress-bar "__cmd__ assets/login/login.$ARCH" "0" "prog:1" "Connecting to server/database ..." -r

if [[ $1 == "-dev" ]]
then
  :
#  log2dev "user" "passwd"
else
  vaild_login
fi

if [[ $updater == "on" ]]
then
if [[ ! $1 == "-dev" ]]
then
progress-bar "__cmd__ gtUPDATE" "0" "prog:1" "Checking for latest update ..." -r
fi
fi

progress-bar "__cmd__ special.event" "0" "prog:1" "Welcome to Pentesting Framework ..." -r
fi
theHEADER
else
  if [[ ! $1 == "module"* ]]
  then
cd $TMPDIR
curl -sLO "${RAWLINK}/assets/login/login.$ARCH"
chmod +x login.$ARCH

progress-bar "__cmd__ ./login.$ARCH" "0" "prog:1" "Welcome to Pentesting Framework ..." -r

progress-bar "__cmd__ special.event" "0" "prog:1" "Welcome to Pentesting Framework ..." -r

vaild_login
  fi
theHEADER
   fi
  fi
 fi
fi

if [[ ! ${FALSE} == "false" ]]
then
  if [[ ${autolist} == "on" ]]
  then
  AUTOLIST()
  {
     command=""
     input=list
     BUNDLE
     input=""
   }
else
  AUTOLIST()
  {
    command=""
  }
fi
else
  AUTOLIST()
  {
    command=""
  }
fi


msnum()
{
  MNUM="${1}"
  SNUM="${2}"
  R1NUM="${2}"
  R2NUM="${3}"

  if [[ ${R2NUM} == "@" ]]
  then
    printf "use :"
  elif [[ ${R2NUM} == ":" ]]
  then
    printf "Using configured :"
  fi

  if [[ ${MNUM} -gt "0" ]]
  then
    PRINTMODULE=$(printf "${MODULE[${MNUM} -1]}")
    if [[ ${R1NUM} == "~" || ${R2NUM} == "~" ]]
    then
      printf "${PRINTMODULE~}"
    elif [[ ${R1NUM} == "~~" || ${R2NUM} == "~~" ]]
    then
      printf "${PRINTMODULE~~}"
    else
      printf "${PRINTMODULE}"
    fi
  fi

  getMSnum

  if [[ ${SNUM} -gt "0" ]]
  then
    PRINTSUBMODULE=$(printf "${PSUBMODULE[${SNUM} -1]}")
    if [[ ${R1NUM} == "~" || ${R2NUM} == "~" ]]
    then
      printf "/${PRINTSUBMODULE~}"
    elif [[ ${R1NUM} == "~~" || ${R2NUM} == "~~" ]]
    then
      printf "/${PRINTSUBMODULE~~}"
    else
      printf "/${PRINTSUBMODULE}"
    fi
  fi

  MSNAME=$(printf "${PRINTMODULE~~}/${PRINTSUBMODULE~~}")

  if [[ ${R2NUM} == "@" ]]
  then
    printf "/handler"
  elif [[ ${R2NUM} == ":" ]]
  then
    printf " mode"
  fi

  if [[ ${R2NUM} == "-" ]]
  then
    printf "${LIMIT}"
  fi
}

writeCONFIGURE()
{
  ARG1=$1
  ARG2=$2
     msERROR()
     {
     list $ARG1 $ARG2 N
     if [[ ${input} == *[!A-Za-z\&./=_:?-]* || ${input} == ${LIMIT} ]]
     then
       :
     else
       if [[ ${input} != ${LIMIT} ]]
       then
         ignoreERROR
       fi
     fi

     if [[ ${input} -gt ${LIMIT} ]]
     then
      ignoreERROR
     fi
   }
     AUTOLIST
     while true
     do
     if [[ ! ${FALSE} == "false" ]]
     then
     read -r -p "${R4}psf${R0} use(${C1}program/$(msnum $ARG1 $ARG2)${R0}) > " input
     msERROR
   else
     msERROR
     fi

     if [[ ! ${FALSE} == "false" ]]
     then
     BUNDLE
     else
     BUNDLE
     exit 0
     fi
     cmdFALSE
     done
}

# <<<--- History Section ! --->>>

# Custom History Logger

function psfHISTORY () {
NUM=1

if [[ ! -f $OUTPUT ]]
 then
 touch $OUTPUT
fi

LOG=$(wc -l ${OUTPUT} | awk '{ print $1 }')

overHISTORY() {
TOT=$((LOG-30))
sed -n "${TOT},${LOG}p" $OUTPUT > .temp.history.psf && mv .temp.history.psf $OUTPUT
}

if [[ ${LOG} -gt 50 ]]
then
cd $HOME || exit 1
overHISTORY
LOG=$(wc -l ${OUTPUT} | awk '{ print $1 }')
fi


i=1

fetch() {
for (( c=1; c<=LOG; c++))
do printf "...\n"
done
}

declare -a LOGS=(
$(printf "$(fetch)")
)

historyLOOP() {
for i in "${LOGS[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  FILE=$(cat "$OUTPUT" | awk NR==${LOOP})
  history -s "${FILE}"
  ((NUM++))
  done
}
  historyLOOP
  LOOP=0
}

unset psfHISTORY

# Default (Shell) History Logger
function psfHISTORY()
{
history -r "${OUTPUT}"
}

# <<<--- Psf Section ! --->>>

psf() {
psfHISTORY

if [[ $PROMPT == 1 ]]
then
read -r -e -p $'\e[4;0;0;0;0;0;0;0;0;4mpsf\e[0m > \e[0m' command
STYLE=$'\e[4mpsf\e[0m > \e[0m'

elif [[ $PROMPT == 2 ]]
then
read -r -e -p $'\e[0;104m \e[90m~/psf \e[0m\e[94m \e[0m' command
STYLE=$'\e[104m \e[90mpsf \e[0m\e[94m\e[0m'

elif [[ $PROMPT == 3 ]]
then
read -r -e -p $'\e[93;0;0;0;0;0;93mpsf\e[93m ➤ \e[0m' command
STYLE=$'\e[93mpsf\e[93m ➤ \e[0m'
fi

if [ ${#command} -gt 0 ]
then
if [[ $(cat "${OUTPUT}") == *"${command}"* ]]
then
sed -i "s,$command,,g" "$OUTPUT" | sed -i '/^$/d' "$OUTPUT"
sed -i "s,$command,,g" "$OUTPUT" | sed -i '/^$/d' "$OUTPUT"
echo "${command}" >> "$OUTPUT"
else
echo "${command}" >> "$OUTPUT"
fi
fi
}

showHISTORY() {
while IFS= read -r line; do
    LOOP=$((${LOOP:-0}+1))
    printf "${LOOP}  $line\n"
done < "$OUTPUT"
LOOP=0
}


# <<<--- Error Section ! --->>>

showERROR() {
echo -e "${r0SIGN} Unsatisfied command ‘${@:1}’ :: execute '?'/'help'"
}

ignoreERROR() {
if [[ ${input} == "?" || ${input} == "help" ]]
then
   :

elif [[ ${input} == "list" ]]
then
   :

elif [[ ${CMD} == "list" ]]
then
   :

elif [[ ${input} == "back" ]]
then
   :

elif [[ ${input} == "info" ]]
then
   :

elif [[ ${input} == "banner" ]]
then
   :

elif [[ ${input} == "exit" ]]
then
   :

elif [[ ${input} == "q" ]]
then
   :

elif [[ ${input} == "clear" ]]
then
   :

elif [[ ${input} == *""* ]]
     then
  if [[ ${#input} -gt 0 ]]
   then
#     echo -e "\e[94m(\e[0mexec\e[94m)\e[0m: ${command}"
      $input 2>/dev/null
  if [[ $? == 0 ]]
     then
        :
        input=""
      else
         showERROR "$input"
         input=""
  fi
fi

else
  showERROR "$input"
  input=""
  fi
}


ignoreCOMMAND() {
if [[ ${command-} == "set"* ]]
then
showERROR $command
command=""
fi

if [[ ${input-} == "set"* ]]
then
showERROR $input
input=""
fi
}


theERROR() {
command="$command"
  if [ ${#command} -gt 0 ]
   then
      showERROR $command
  fi

input="${input}"

if [[ ${input} == "?" ]]
then
input_="${input}"
input="${input#?}"
fi
}


# <<<--- Command Section ! --->>>

getCOMMANDS() {

 if [[ ${command} == "use :phish/otpweb/handler" ]]
   then
      TRUE=true

   elif [[ ${command} == "use :phish/notpweb/handler" ]]
   then
     TRUE=true
      
   elif [[ ${command} == "use :phish/gpsweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :phish/camweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :phish/micweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :lookup/user/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :bomber/callnsms/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :remote/payload/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :brute/social/handler" ]]
   then
      TRUE=true

   elif [[ ${command} == "use :brute/hashes/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :attack/ddos/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :lookup/number/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :lookup/coordinate/handler" ]]
   then
      TRUE=true

    elif [[ ${command} == "use :lookup/mac/handler" ]]
    then
      TRUE=true

  elif [[ ${command} == "use :secure/hashes/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :secure/passwd/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :system/binary/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :mask/nurl/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :find/proxy/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :find/ip/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :identify/hashid/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :scan/virus/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use :local/server/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "?" || ${command} == "help" ]]
   then
      helpCOMMANDS
      command=""

  elif [[ ${command} == "banner" ]]
     then
        theHEADER
        command=""

  elif [[ ${command} == "list" ]]
     then
        echo -e "${g0SIGN} 'list' command only works with Modules! :: execute '?'/'help'"
        command=""

 elif [[ ${command} == "info" ]]
     then
        echo -e "${g0SIGN} 'info' command only works in Modules! :: execute '?'/'help'"
        command=""

 elif [[ ${command} == "back" ]]
     then
        echo -e "${g0SIGN} 'back' command only works in Modules! :: execute '?'/'help'"
        command=""

 elif [[ ${command} == "version" ]]
     then
        echo -e "Framework Version: release v$VAR"
        command=""

 elif [[ ${command} == "lookup" ]]
     then
       lookup()
       {
         curl -s ifconfig.me/all.json | jq > $TMPDIR/lookup.psf
       }
        progress-bar "__cmd__ lookup" "0" "prog:1" "Getting information ..." -r
        cat $TMPDIR/lookup.psf | jq
        command=""
 
 elif [[ ${command} == "sysinfo" ]]
     then
       getSYS
        command=""

  elif [[ ${command} == "exit" || ${command} == "quit" ]]
     then
       progress-bar "__sw2__" "0" "prog:1" "Existing Psfconsole ..." -r 
        exit 0
        command=""

  elif [[ ${command} == "psf update" ]]
     then
       git pull
       command=""
       exit 0

  elif [[ ${command} == "use" ]]
     then
        echo -e "Usage: use :<module>/handler

Interact with a module by name term/index.
If a module name is not found, it will be treated as a search term.
An index from the exist module results can be selected if desired.

Examples:
  use :info/handler
"
        command=""

  elif [[ ${command} == "search" ]]
     then
        echo -e "Usage: search module:<module>
       search submodule:<submodule>

Search  a module/submodule by name term/index.
If a module name is not found, it will be treated as a search term.
An index from the search results from exist module selected if desired.

Examples:
  search module:lookup
  search submodule:user
"
        command=""

  elif [[ ${command} == "search module:"* ]]
     then
        INPUT="${command#search module:}"
for i in "${MODULE[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  CATCH=${i::$((${#i}))}
  if [[ ${CATCH} == ${INPUT} ]]
  then
     echo -e "Module \e[97;104m${INPUT}${R0} is Available."
     break
  fi
  ((NUM++))
  done

if [[ ${CATCH} != ${INPUT} ]]
  then
    echo -e "Module \e[101m${INPUT}${R0} is not Available."
fi
        LOOP=0
        command=""


  elif [[ ${command} == "search submodule:"* ]]
     then
        INPUT="${command#search submodule:}"
for i in "${SUBMODULE[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  CATCH=${i::$((${#i}))}
  if [[ ${CATCH} == ${INPUT} ]]
  then
     echo -e "Sub Module \e[97;104m${INPUT}${R0} is Available."
     break
  fi
  ((NUM++))
  done

if [[ ${CATCH} != ${INPUT} ]]
  then
    echo -e "Sub Module \e[101m${INPUT}${R0} is not Available."
fi
        LOOP=0
        command=""

  elif [[ ${command} == "show" ]]
     then
        echo -e "${r0SIGN} Argument required\n"
        echo -e "${g0SIGN} Valid parameters for the \"show\" command are: modules, info, plugins, options"
        command=""

  elif [[ ${command} == "show"* ]]
     then
       progress-bar "__sw2__" "0.0350" "prog:5" "" -r 
        INPUT="${command#show }"
  if [[ $INPUT == "modules" ]]
   then
      moduleCOMMANDS
      command=""

  elif [[ $INPUT == "info" ]]
   then
      infoCOMMANDS
      command=""

  elif [[ $INPUT == "plugins" ]]
   then
      pluginCOMMANDS
      command=""

  elif [[ $INPUT == "options" ]]
   then
      optionCOMMANDS
      command=""

  elif [[ $INPUT == "-h" || $INPUT == "--help" || $INPUT == "help" ]]
    then
       echo -e "${g0SIGN} Valid parameters for the \"show\" command are: modules, info, plugins, options"
       command=""

   else
     echo -e "${r0SIGN} Invalid parameter \"${INPUT}\", use "'"show -h"'" for more information. "
     command=""
  fi

  elif [[ ${command} == "q" ]]
     then
       progress-bar "__wait__ 2" "0.0350" "prog:5" "" -r
        clear
        exit 0
        command=""

  elif [[ ${command} == "clear" ]]
     then
       progress-bar "__sw2__" "0.05" "prog:4" "" -r 
        clear
        command=""

  elif [[ ${command} == "history" ]]
      then
        progress-bar "__sw2__" "0.03" "prog:2" "" -r 
         showHISTORY
         command=""

  elif [[ ${command} == *""* ]]
     then
        ignoreCOMMAND command
  if [[ ${#command} -gt 0 ]]
   then
#     echo -e "\e[94m(\e[0mexec\e[94m)\e[0m: ${command}"
     $command 2>/dev/null
 if [[ $? == 0 ]]
     then
       command=""
     else
       :
  fi
fi
  fi

  for i in "${extraMODULES[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  LSMODULES=${i::$((${#i}))}
  if [[ ${command} == ${LSMODULES} ]]
  then
    TRUE=true
     break
  fi
  ((NUM++))
  done
 
}

extarnalCMD() {
  if [[ ${input_} == "?" || ${input} == "help" ]]
   then
       helpCOMMANDS
       input_=""
         input=""

   elif [[ ${input} == "back" ]]
      then
while true
do
  progress-bar "__sw2__" "0" "prog:1" "" -r 
         readCOMMAND
done
elif [[ ${input} == "banner" ]]
      then
         theHEADER
         input=""

elif [[ ${input} == "info" ]]
     then
       progress-bar "__sw2__ " "0.0350" "prog:1" "" -r 
        aboutMOFULES
        echo -e "
Name: $NAME
Module: $MODE
Internet Required: $NET

Description:
  $INFO
"
input=""

elif [[ ${input} == "exit" ]]
      then
        progress-bar "__sw__" "0" "prog:1" "Existing psfconsole..." -r
         exit 0

elif [[ ${input} == "q" ]]
      then
        progress-bar "__sw2__" "0.03" "prog:2" "" -r 
         clear
         exit 0

elif [[ ${input} == "clear" ]]
      then
         clear

  fi
}


# <<<--- Reading Section ! --->>>

readCONFIGURE () {
  if [[ ! ${#command} -gt "0" ]]
  then
    :
  elif [[ ${command} == "$(msnum 1 1 @)" ]]
  then
    checkNET
    description "otpweb" "$(msnum 1 1 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 1 1 :)"
     BUNDLE()
     {
       readINPUT "list 1 1" "31" "PHISH/OTPWEB/otpweb"
     }
   writeCONFIGURE 1 1

elif [[ ${command} == "$(msnum 1 2 @)" ]]
  then
    checkNET
     description "notpweb" "$(msnum 1 2 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 1 2 :)"
     BUNDLE()
     {
       readINPUT "list 1 2" "31" "PHISH/NOTPWEB/notpweb"
     }
   writeCONFIGURE 1 2

elif [[ ${command} == "$(msnum 1 3 @)" ]]
  then
    checkNET
    description "gpsweb" "$(msnum 1 3 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 1 3 :)"
     BUNDLE()
     {
       readINPUT "list 1 3" "5" "PHISH/GPSWEB/gpsweb"
     }
   writeCONFIGURE 1 3

elif [[ ${command} == "$(msnum 1 4 @)" ]]
  then
    checkNET
     description "camweb" "$(msnum 1 4 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 1 4 :)"
     BUNDLE()
     {
       readINPUT "list 1 4" "5" "PHISH/CAMWEB/camweb"
     }
   writeCONFIGURE 1 4

elif [[ ${command} == "$(msnum 1 5 @)" ]]
  then
    checkNET
     description "micweb" "$(msnum 1 5 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 1 5 :)"
     BUNDLE()
     {
       readINPUT "list 1 5" "2" "PHISH/MICWEB/micweb"
     }
   writeCONFIGURE 1 5

elif [[ ${command} == "$(msnum 2 1 @)" ]]
  then
    checkNET
     description "callnsms" "$(msnum 2 1 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 2 1 :)"
     BUNDLE()
     {
       readINPUT "list 2 1" "3" "BOMBER/run"
     }
   writeCONFIGURE 2 1

elif [[ ${command} == "$(msnum 3 1 @)" ]]
  then
    checkNET
     description "user" "$(msnum 3 1 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 3 1 :)"
     BUNDLE()
     {
       readINPUT "list1 3 1" "3" "LOOKUP/USER/user"
     }
   writeCONFIGURE 3 1

elif [[ ${command} == "$(msnum 3 2 @)" ]]
  then
    checkNET
     description "number" "$(msnum 3 2 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 3 2 :)"
     BUNDLE()
     {
       readLIST "list 3 2"
       readINPUTS "run" "source" "LOOKUP/NUMBER/number"
     }
   writeCONFIGURE 3 2

elif [[ ${command} == "$(msnum 3 3 @)" ]]
  then
    checkNET
     description "mac" "$(msnum 3 3 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 3 3 :)"
     BUNDLE()
     {
       readLIST "list 3 3"
       readINPUTS "run" "source" "LOOKUP/MAC/mac"
     }
   writeCONFIGURE 3 3

elif [[ ${command} == "$(msnum 3 4 @)" ]]
  then
    checkNET
     description "mac" "$(msnum 3 4 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 3 4 :)"
     BUNDLE()
     {
       readLIST "list 3 4"
       readINPUTS "run" "source" "LOOKUP/COORDINATE/coordinate"
     }
   writeCONFIGURE 3 4

elif [[ ${command} == "$(msnum 4 1 @)" ]]
  then
     description "payload" "$(msnum 4 1 ~~)" "not"
     echo -e "${b0SIGN} $(msnum 4 1 :)"
     BUNDLE()
     {
       readINPUT "list 4 1" "11" "REMOTE/PAYLOAD/payload"
     }
   writeCONFIGURE 4 1

elif [[ ${command} == "$(msnum 5 1 @)" ]]
  then
    checkNET
     description "social" "$(msnum 5 1 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 5 1 :)"
     BUNDLE()
     {
       readLIST "list 5 1"
       readINPUTS "1" "python3" "BRUTE/SOCIAL/facebook.py"
       readINPUTS "2" "python3" "BRUTE/SOCIAL/instagram.py"
       readINPUTS "3" "python2" "BRUTE/SOCIAL/gmail.py"
     }
   writeCONFIGURE 5 1

elif [[ ${command} == "$(msnum 5 2 @)" ]]
  then
     description "hashes" "$(msnum 5 2 ~~)" "yes/no"
     echo -e "${b0SIGN} $(msnum 5 2 :)"
     BUNDLE()
     {
       readLIST "list 5 2"
       readINPUTS "1" "python3" "BRUTE/HASHES/md5.brute.py"
       readINPUTS "2" "python3" "BRUTE/HASHES/sha1.brute.py"
       readINPUTS "3" "python3" "BRUTE/HASHES/sha224.brute.py"
       readINPUTS "4" "python3" "BRUTE/HASHES/sha256.brute.py"
       readINPUTS "5" "python3" "BRUTE/HASHES/sha512.brute.py"
       readINPUTS "6" "python2" "BRUTE/HASHES/ntlm.brute.py"
       readINPUTS "7" "python2" "BRUTE/HASHES/md5brute.offline.py"
       readINPUTS "8" "python2" "BRUTE/HASHES/sha1brute.offline.py"
       readINPUTS "9" "python2" "BRUTE/HASHES/sha224brute.offline.py"
       readINPUTS "10" "python2" "BRUTE/HASHES/sha256brute.offline.py"
       readINPUTS "11" "python2" "BRUTE/HASHES/sha384brute.offline.py"
       readINPUTS "12" "python2" "BRUTE/HASHES/sha512brute.offline.py"
     }
   writeCONFIGURE 5 2

 elif [[ ${command} == "$(msnum 6 1 @)" ]]
  then
    checkNET
     description "ddos" "$(msnum 6 1 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 6 1 :)"
     BUNDLE()
     {
       readLIST "list 6 1"
       readINPUTS "1" "source" "ATTACK/SITEDDOS/start"
       readINPUTS "2" "python2" "ATTACK/IPDDOS/ddos.py"
     }
   writeCONFIGURE 6 1

elif [[ ${command} == "$(msnum 7 1 @)" ]]
  then
     description "hashes" "$(msnum 7 1 ~~)" "not"
     echo -e "${b0SIGN} $(msnum 7 1 :)"
     BUNDLE()
     {
       readINPUTS "9" "source" "SECURE/HASHES/allhashes"
       readINPUT "list 7 1" "9" "SECURE/HASHES/hashes"
     }
   writeCONFIGURE 7 1

elif [[ ${command} == "$(msnum 7 2 @)" ]]
  then
     description "passwd" "$(msnum 7 2 ~~)" "not"
     echo -e "${b0SIGN} $(msnum 7 2 :)"
     BUNDLE()
     {
       readINPUT "list 7 2" "8" "$(msnum 7 2 ~~)/passwd"
     }
   writeCONFIGURE 7 2

elif [[ ${command} == "$(msnum 8 1 @)" ]]
  then
     description "binary" "$(msnum 8 1 ~~)" "not"
     echo -e "${b0SIGN} $(msnum 8 1 :)"
     BUNDLE()
     {
       readLIST "list 8 1"
       readINPUTS "1" "source" "SYSTEM/BINARY/ENCODE/run"
       readINPUTS "2" "source" "SYSTEM/BINARY/DECODE/run"
     }
   writeCONFIGURE 8 1

elif [[ ${command} == "$(msnum 9 1 @)" ]]
  then
    checkNET
     description "nurl" "$(msnum 9 1 ~~)" "yes"
     echo -e "${b0SIGN} $(msnum 9 1 :)"
     BUNDLE()
     {
       readINPUT "list 9 1" "5" "MASK/NURL/url"
     }
   writeCONFIGURE 9 1

elif [[ ${command} == "$(msnum 10 1 @)" ]]
  then
    checkNET
    description "proxy" "$(msnum 10 1 ~~)" "yes"
    echo -e "${b0SIGN} $(msnum 10 1 :)"
     BUNDLE()
     {
       readLIST "list 10 1"
       readINPUTS "run" "python2" "FIND/PROXY/finder.py"
     }
   writeCONFIGURE 10 1

elif [[ ${command} == "$(msnum 10 2 @)" ]]
  then
    checkNET
    description "proxy" "$(msnum 10 2 ~~)" "yes"
    echo -e "${b0SIGN} $(msnum 10 2 :)"
     BUNDLE()
     {
       readLIST "list 10 2"
       readINPUTS "run" "python3" "FIND/IP/finder.py"
     }
   writeCONFIGURE 10 2

elif [[ ${command} == "$(msnum 11 1 @)" ]]
  then
    description "hashid" "$(msnum 11 1 ~~)" "no"
    echo -e "${b0SIGN} $(msnum 11 1 :)"
     BUNDLE()
     {
       readLIST "list 11 1"
       readINPUTS "run" "python3" "IDENTIFY/HASHID/hashid.py"
     }
   writeCONFIGURE 11 1

 elif [[ ${command} == "$(msnum 12 1 @)" ]]
  then
    checkNET
    description "virus" "$(msnum 12 1 ~~)" "yes"
    echo -e "${b0SIGN} $(msnum 12 1 :)"
     BUNDLE()
     {
       readINPUT "list 12 1" "4" "SCAN/VIRUS/start"
     }
   writeCONFIGURE 12 1

 elif [[ ${command} == "$(msnum 13 1 @)" ]]
  then
    checkNET
    description "server" "$(msnum 13 1 ~~)" "yes"
    echo -e "${b0SIGN} $(msnum 13 1 :)"
     BUNDLE()
     {
       readINPUT "list 13 1" "4" "LOCAL/SERVER/server"
     }
   writeCONFIGURE 13 1

  fi
}


# <<<--- Main Function ! --->>>

__main__() {
interrupt
while true
do
if [[ ! ${FALSE} == "false" ]]
then
  psf
  getCOMMANDS
else
  break & readCONFIGURE
  cmdFALSE
fi
if [[ ${TRUE} == "true" ]]
then
  break & readCONFIGURE
fi
input=""
theERROR
done
}

sudoPERM
__main__

# <<<--- End --->>>
